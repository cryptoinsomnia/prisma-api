import { Prisma as BasePrisma, BasePrismaOptions } from 'prisma-binding'
import { GraphQLResolveInfo } from 'graphql'

export const typeDefs = `
# THIS FILE HAS BEEN AUTO-GENERATED BY "PRISMA DEPLOY"
# DO NOT EDIT THIS FILE DIRECTLY

#
# Model Types
#

type Comment implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  content: String!
  directParentType: CONTENT_TYPE!
  author(where: UserWhereInput): User!
  post(where: PostWhereInput): Post!
  votes(where: VoteWhereInput, orderBy: VoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Vote!]
  flags(where: FlagWhereInput, orderBy: FlagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Flag!]
}

type Flag implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  reportedContentType: CONTENT_TYPE!
  creator(where: UserWhereInput): User!
  reportedUser(where: UserWhereInput): User!
  comment(where: CommentWhereInput): Comment
  post(where: PostWhereInput): Post!
}

type Post implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  url: String
  content: String
  hidden: Boolean
  mediaLink: String
  isAdmin: Boolean
  author(where: UserWhereInput): User!
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment!]
  flags(where: FlagWhereInput, orderBy: FlagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Flag!]
  votes(where: VoteWhereInput, orderBy: VoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Vote!]
}

type User implements Node {
  id: ID!
  facebookUserId: String
  facebookEmail: String
  createdAt: DateTime!
  updatedAt: DateTime!
  email: String
  username: String
  password: String
  name: String
  admin: Boolean
  about: String
  userType: USER_TYPE
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post!]
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment!]
  flagsReportedAboutOthers(where: FlagWhereInput, orderBy: FlagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Flag!]
  flagsReportedAboutThisUser(where: FlagWhereInput, orderBy: FlagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Flag!]
}

type Vote implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  score: Int!
  contentType: CONTENT_TYPE!
  comment(where: CommentWhereInput): Comment
  post(where: PostWhereInput): Post!
}


#
# Other Types
#

type AggregateComment {
  count: Int!
}

type AggregateFlag {
  count: Int!
}

type AggregatePost {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateVote {
  count: Int!
}

type BatchPayload {
  """
  The number of nodes that have been affected by the Batch operation.
  """
  count: Long!
}

"""
A connection to a list of items.
"""
type CommentConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [CommentEdge]!
  aggregate: AggregateComment!
}

input CommentCreateInput {
  content: String!
  directParentType: CONTENT_TYPE!
  author: UserCreateOneWithoutCommentsInput!
  post: PostCreateOneWithoutCommentsInput!
  votes: VoteCreateManyWithoutCommentInput
  flags: FlagCreateManyWithoutCommentInput
}

input CommentCreateManyWithoutAuthorInput {
  create: [CommentCreateWithoutAuthorInput!]
  connect: [CommentWhereUniqueInput!]
}

input CommentCreateManyWithoutPostInput {
  create: [CommentCreateWithoutPostInput!]
  connect: [CommentWhereUniqueInput!]
}

input CommentCreateOneWithoutFlagsInput {
  create: CommentCreateWithoutFlagsInput
  connect: CommentWhereUniqueInput
}

input CommentCreateOneWithoutVotesInput {
  create: CommentCreateWithoutVotesInput
  connect: CommentWhereUniqueInput
}

input CommentCreateWithoutAuthorInput {
  content: String!
  directParentType: CONTENT_TYPE!
  post: PostCreateOneWithoutCommentsInput!
  votes: VoteCreateManyWithoutCommentInput
  flags: FlagCreateManyWithoutCommentInput
}

input CommentCreateWithoutFlagsInput {
  content: String!
  directParentType: CONTENT_TYPE!
  author: UserCreateOneWithoutCommentsInput!
  post: PostCreateOneWithoutCommentsInput!
  votes: VoteCreateManyWithoutCommentInput
}

input CommentCreateWithoutPostInput {
  content: String!
  directParentType: CONTENT_TYPE!
  author: UserCreateOneWithoutCommentsInput!
  votes: VoteCreateManyWithoutCommentInput
  flags: FlagCreateManyWithoutCommentInput
}

input CommentCreateWithoutVotesInput {
  content: String!
  directParentType: CONTENT_TYPE!
  author: UserCreateOneWithoutCommentsInput!
  post: PostCreateOneWithoutCommentsInput!
  flags: FlagCreateManyWithoutCommentInput
}

"""
An edge in a connection.
"""
type CommentEdge {
  """
  The item at the end of the edge.
  """
  node: Comment!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum CommentOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  content_ASC
  content_DESC
  directParentType_ASC
  directParentType_DESC
}

type CommentPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  content: String!
  directParentType: CONTENT_TYPE!
}

type CommentSubscriptionPayload {
  mutation: MutationType!
  node: Comment
  updatedFields: [String!]
  previousValues: CommentPreviousValues
}

input CommentSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [CommentSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [CommentSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CommentWhereInput
}

input CommentUpdateInput {
  content: String
  directParentType: CONTENT_TYPE
  author: UserUpdateOneWithoutCommentsInput
  post: PostUpdateOneWithoutCommentsInput
  votes: VoteUpdateManyWithoutCommentInput
  flags: FlagUpdateManyWithoutCommentInput
}

input CommentUpdateManyWithoutAuthorInput {
  create: [CommentCreateWithoutAuthorInput!]
  connect: [CommentWhereUniqueInput!]
  disconnect: [CommentWhereUniqueInput!]
  delete: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithoutAuthorInput!]
  upsert: [CommentUpsertWithoutAuthorInput!]
}

input CommentUpdateManyWithoutPostInput {
  create: [CommentCreateWithoutPostInput!]
  connect: [CommentWhereUniqueInput!]
  disconnect: [CommentWhereUniqueInput!]
  delete: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithoutPostInput!]
  upsert: [CommentUpsertWithoutPostInput!]
}

input CommentUpdateOneWithoutFlagsInput {
  create: CommentCreateWithoutFlagsInput
  connect: CommentWhereUniqueInput
  disconnect: CommentWhereUniqueInput
  delete: CommentWhereUniqueInput
  update: CommentUpdateWithoutFlagsInput
  upsert: CommentUpsertWithoutFlagsInput
}

input CommentUpdateOneWithoutVotesInput {
  create: CommentCreateWithoutVotesInput
  connect: CommentWhereUniqueInput
  disconnect: CommentWhereUniqueInput
  delete: CommentWhereUniqueInput
  update: CommentUpdateWithoutVotesInput
  upsert: CommentUpsertWithoutVotesInput
}

input CommentUpdateWithoutAuthorDataInput {
  content: String
  directParentType: CONTENT_TYPE
  post: PostUpdateOneWithoutCommentsInput
  votes: VoteUpdateManyWithoutCommentInput
  flags: FlagUpdateManyWithoutCommentInput
}

input CommentUpdateWithoutAuthorInput {
  where: CommentWhereUniqueInput!
  data: CommentUpdateWithoutAuthorDataInput!
}

input CommentUpdateWithoutFlagsDataInput {
  content: String
  directParentType: CONTENT_TYPE
  author: UserUpdateOneWithoutCommentsInput
  post: PostUpdateOneWithoutCommentsInput
  votes: VoteUpdateManyWithoutCommentInput
}

input CommentUpdateWithoutFlagsInput {
  where: CommentWhereUniqueInput!
  data: CommentUpdateWithoutFlagsDataInput!
}

input CommentUpdateWithoutPostDataInput {
  content: String
  directParentType: CONTENT_TYPE
  author: UserUpdateOneWithoutCommentsInput
  votes: VoteUpdateManyWithoutCommentInput
  flags: FlagUpdateManyWithoutCommentInput
}

input CommentUpdateWithoutPostInput {
  where: CommentWhereUniqueInput!
  data: CommentUpdateWithoutPostDataInput!
}

input CommentUpdateWithoutVotesDataInput {
  content: String
  directParentType: CONTENT_TYPE
  author: UserUpdateOneWithoutCommentsInput
  post: PostUpdateOneWithoutCommentsInput
  flags: FlagUpdateManyWithoutCommentInput
}

input CommentUpdateWithoutVotesInput {
  where: CommentWhereUniqueInput!
  data: CommentUpdateWithoutVotesDataInput!
}

input CommentUpsertWithoutAuthorInput {
  where: CommentWhereUniqueInput!
  update: CommentUpdateWithoutAuthorDataInput!
  create: CommentCreateWithoutAuthorInput!
}

input CommentUpsertWithoutFlagsInput {
  where: CommentWhereUniqueInput!
  update: CommentUpdateWithoutFlagsDataInput!
  create: CommentCreateWithoutFlagsInput!
}

input CommentUpsertWithoutPostInput {
  where: CommentWhereUniqueInput!
  update: CommentUpdateWithoutPostDataInput!
  create: CommentCreateWithoutPostInput!
}

input CommentUpsertWithoutVotesInput {
  where: CommentWhereUniqueInput!
  update: CommentUpdateWithoutVotesDataInput!
  create: CommentCreateWithoutVotesInput!
}

input CommentWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [CommentWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [CommentWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  createdAt: DateTime
  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime
  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  createdAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime
  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime
  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime
  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime
  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
  content: String
  """
  All values that are not equal to given value.
  """
  content_not: String
  """
  All values that are contained in given list.
  """
  content_in: [String!]
  """
  All values that are not contained in given list.
  """
  content_not_in: [String!]
  """
  All values less than the given value.
  """
  content_lt: String
  """
  All values less than or equal the given value.
  """
  content_lte: String
  """
  All values greater than the given value.
  """
  content_gt: String
  """
  All values greater than or equal the given value.
  """
  content_gte: String
  """
  All values containing the given string.
  """
  content_contains: String
  """
  All values not containing the given string.
  """
  content_not_contains: String
  """
  All values starting with the given string.
  """
  content_starts_with: String
  """
  All values not starting with the given string.
  """
  content_not_starts_with: String
  """
  All values ending with the given string.
  """
  content_ends_with: String
  """
  All values not ending with the given string.
  """
  content_not_ends_with: String
  directParentType: CONTENT_TYPE
  """
  All values that are not equal to given value.
  """
  directParentType_not: CONTENT_TYPE
  """
  All values that are contained in given list.
  """
  directParentType_in: [CONTENT_TYPE!]
  """
  All values that are not contained in given list.
  """
  directParentType_not_in: [CONTENT_TYPE!]
  author: UserWhereInput
  post: PostWhereInput
  votes_every: VoteWhereInput
  votes_some: VoteWhereInput
  votes_none: VoteWhereInput
  flags_every: FlagWhereInput
  flags_some: FlagWhereInput
  flags_none: FlagWhereInput
}

input CommentWhereUniqueInput {
  id: ID
}

enum CONTENT_TYPE {
  POST
  COMMENT
}

scalar DateTime

"""
A connection to a list of items.
"""
type FlagConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [FlagEdge]!
  aggregate: AggregateFlag!
}

input FlagCreateInput {
  reportedContentType: CONTENT_TYPE!
  creator: UserCreateOneWithoutFlagsReportedAboutOthersInput!
  reportedUser: UserCreateOneWithoutFlagsReportedAboutThisUserInput!
  comment: CommentCreateOneWithoutFlagsInput
  post: PostCreateOneWithoutFlagsInput!
}

input FlagCreateManyWithoutCommentInput {
  create: [FlagCreateWithoutCommentInput!]
  connect: [FlagWhereUniqueInput!]
}

input FlagCreateManyWithoutCreatorInput {
  create: [FlagCreateWithoutCreatorInput!]
  connect: [FlagWhereUniqueInput!]
}

input FlagCreateManyWithoutPostInput {
  create: [FlagCreateWithoutPostInput!]
  connect: [FlagWhereUniqueInput!]
}

input FlagCreateManyWithoutReportedUserInput {
  create: [FlagCreateWithoutReportedUserInput!]
  connect: [FlagWhereUniqueInput!]
}

input FlagCreateWithoutCommentInput {
  reportedContentType: CONTENT_TYPE!
  creator: UserCreateOneWithoutFlagsReportedAboutOthersInput!
  reportedUser: UserCreateOneWithoutFlagsReportedAboutThisUserInput!
  post: PostCreateOneWithoutFlagsInput!
}

input FlagCreateWithoutCreatorInput {
  reportedContentType: CONTENT_TYPE!
  reportedUser: UserCreateOneWithoutFlagsReportedAboutThisUserInput!
  comment: CommentCreateOneWithoutFlagsInput
  post: PostCreateOneWithoutFlagsInput!
}

input FlagCreateWithoutPostInput {
  reportedContentType: CONTENT_TYPE!
  creator: UserCreateOneWithoutFlagsReportedAboutOthersInput!
  reportedUser: UserCreateOneWithoutFlagsReportedAboutThisUserInput!
  comment: CommentCreateOneWithoutFlagsInput
}

input FlagCreateWithoutReportedUserInput {
  reportedContentType: CONTENT_TYPE!
  creator: UserCreateOneWithoutFlagsReportedAboutOthersInput!
  comment: CommentCreateOneWithoutFlagsInput
  post: PostCreateOneWithoutFlagsInput!
}

"""
An edge in a connection.
"""
type FlagEdge {
  """
  The item at the end of the edge.
  """
  node: Flag!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum FlagOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  reportedContentType_ASC
  reportedContentType_DESC
}

type FlagPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  reportedContentType: CONTENT_TYPE!
}

type FlagSubscriptionPayload {
  mutation: MutationType!
  node: Flag
  updatedFields: [String!]
  previousValues: FlagPreviousValues
}

input FlagSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [FlagSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [FlagSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: FlagWhereInput
}

input FlagUpdateInput {
  reportedContentType: CONTENT_TYPE
  creator: UserUpdateOneWithoutFlagsReportedAboutOthersInput
  reportedUser: UserUpdateOneWithoutFlagsReportedAboutThisUserInput
  comment: CommentUpdateOneWithoutFlagsInput
  post: PostUpdateOneWithoutFlagsInput
}

input FlagUpdateManyWithoutCommentInput {
  create: [FlagCreateWithoutCommentInput!]
  connect: [FlagWhereUniqueInput!]
  disconnect: [FlagWhereUniqueInput!]
  delete: [FlagWhereUniqueInput!]
  update: [FlagUpdateWithoutCommentInput!]
  upsert: [FlagUpsertWithoutCommentInput!]
}

input FlagUpdateManyWithoutCreatorInput {
  create: [FlagCreateWithoutCreatorInput!]
  connect: [FlagWhereUniqueInput!]
  disconnect: [FlagWhereUniqueInput!]
  delete: [FlagWhereUniqueInput!]
  update: [FlagUpdateWithoutCreatorInput!]
  upsert: [FlagUpsertWithoutCreatorInput!]
}

input FlagUpdateManyWithoutPostInput {
  create: [FlagCreateWithoutPostInput!]
  connect: [FlagWhereUniqueInput!]
  disconnect: [FlagWhereUniqueInput!]
  delete: [FlagWhereUniqueInput!]
  update: [FlagUpdateWithoutPostInput!]
  upsert: [FlagUpsertWithoutPostInput!]
}

input FlagUpdateManyWithoutReportedUserInput {
  create: [FlagCreateWithoutReportedUserInput!]
  connect: [FlagWhereUniqueInput!]
  disconnect: [FlagWhereUniqueInput!]
  delete: [FlagWhereUniqueInput!]
  update: [FlagUpdateWithoutReportedUserInput!]
  upsert: [FlagUpsertWithoutReportedUserInput!]
}

input FlagUpdateWithoutCommentDataInput {
  reportedContentType: CONTENT_TYPE
  creator: UserUpdateOneWithoutFlagsReportedAboutOthersInput
  reportedUser: UserUpdateOneWithoutFlagsReportedAboutThisUserInput
  post: PostUpdateOneWithoutFlagsInput
}

input FlagUpdateWithoutCommentInput {
  where: FlagWhereUniqueInput!
  data: FlagUpdateWithoutCommentDataInput!
}

input FlagUpdateWithoutCreatorDataInput {
  reportedContentType: CONTENT_TYPE
  reportedUser: UserUpdateOneWithoutFlagsReportedAboutThisUserInput
  comment: CommentUpdateOneWithoutFlagsInput
  post: PostUpdateOneWithoutFlagsInput
}

input FlagUpdateWithoutCreatorInput {
  where: FlagWhereUniqueInput!
  data: FlagUpdateWithoutCreatorDataInput!
}

input FlagUpdateWithoutPostDataInput {
  reportedContentType: CONTENT_TYPE
  creator: UserUpdateOneWithoutFlagsReportedAboutOthersInput
  reportedUser: UserUpdateOneWithoutFlagsReportedAboutThisUserInput
  comment: CommentUpdateOneWithoutFlagsInput
}

input FlagUpdateWithoutPostInput {
  where: FlagWhereUniqueInput!
  data: FlagUpdateWithoutPostDataInput!
}

input FlagUpdateWithoutReportedUserDataInput {
  reportedContentType: CONTENT_TYPE
  creator: UserUpdateOneWithoutFlagsReportedAboutOthersInput
  comment: CommentUpdateOneWithoutFlagsInput
  post: PostUpdateOneWithoutFlagsInput
}

input FlagUpdateWithoutReportedUserInput {
  where: FlagWhereUniqueInput!
  data: FlagUpdateWithoutReportedUserDataInput!
}

input FlagUpsertWithoutCommentInput {
  where: FlagWhereUniqueInput!
  update: FlagUpdateWithoutCommentDataInput!
  create: FlagCreateWithoutCommentInput!
}

input FlagUpsertWithoutCreatorInput {
  where: FlagWhereUniqueInput!
  update: FlagUpdateWithoutCreatorDataInput!
  create: FlagCreateWithoutCreatorInput!
}

input FlagUpsertWithoutPostInput {
  where: FlagWhereUniqueInput!
  update: FlagUpdateWithoutPostDataInput!
  create: FlagCreateWithoutPostInput!
}

input FlagUpsertWithoutReportedUserInput {
  where: FlagWhereUniqueInput!
  update: FlagUpdateWithoutReportedUserDataInput!
  create: FlagCreateWithoutReportedUserInput!
}

input FlagWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [FlagWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [FlagWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  createdAt: DateTime
  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime
  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  createdAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime
  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime
  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime
  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime
  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
  reportedContentType: CONTENT_TYPE
  """
  All values that are not equal to given value.
  """
  reportedContentType_not: CONTENT_TYPE
  """
  All values that are contained in given list.
  """
  reportedContentType_in: [CONTENT_TYPE!]
  """
  All values that are not contained in given list.
  """
  reportedContentType_not_in: [CONTENT_TYPE!]
  creator: UserWhereInput
  reportedUser: UserWhereInput
  comment: CommentWhereInput
  post: PostWhereInput
}

input FlagWhereUniqueInput {
  id: ID
}

"""
The 'Long' scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createUser(data: UserCreateInput!): User!
  createPost(data: PostCreateInput!): Post!
  createVote(data: VoteCreateInput!): Vote!
  createComment(data: CommentCreateInput!): Comment!
  createFlag(data: FlagCreateInput!): Flag!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updatePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post
  updateVote(data: VoteUpdateInput!, where: VoteWhereUniqueInput!): Vote
  updateComment(data: CommentUpdateInput!, where: CommentWhereUniqueInput!): Comment
  updateFlag(data: FlagUpdateInput!, where: FlagWhereUniqueInput!): Flag
  deleteUser(where: UserWhereUniqueInput!): User
  deletePost(where: PostWhereUniqueInput!): Post
  deleteVote(where: VoteWhereUniqueInput!): Vote
  deleteComment(where: CommentWhereUniqueInput!): Comment
  deleteFlag(where: FlagWhereUniqueInput!): Flag
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertPost(where: PostWhereUniqueInput!, create: PostCreateInput!, update: PostUpdateInput!): Post!
  upsertVote(where: VoteWhereUniqueInput!, create: VoteCreateInput!, update: VoteUpdateInput!): Vote!
  upsertComment(where: CommentWhereUniqueInput!, create: CommentCreateInput!, update: CommentUpdateInput!): Comment!
  upsertFlag(where: FlagWhereUniqueInput!, create: FlagCreateInput!, update: FlagUpdateInput!): Flag!
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput!): BatchPayload!
  updateManyPosts(data: PostUpdateInput!, where: PostWhereInput!): BatchPayload!
  updateManyVotes(data: VoteUpdateInput!, where: VoteWhereInput!): BatchPayload!
  updateManyComments(data: CommentUpdateInput!, where: CommentWhereInput!): BatchPayload!
  updateManyFlags(data: FlagUpdateInput!, where: FlagWhereInput!): BatchPayload!
  deleteManyUsers(where: UserWhereInput!): BatchPayload!
  deleteManyPosts(where: PostWhereInput!): BatchPayload!
  deleteManyVotes(where: VoteWhereInput!): BatchPayload!
  deleteManyComments(where: CommentWhereInput!): BatchPayload!
  deleteManyFlags(where: FlagWhereInput!): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""
An object with an ID
"""
interface Node {
  """
  The id of the object.
  """
  id: ID!
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
}

"""
A connection to a list of items.
"""
type PostConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [PostEdge]!
  aggregate: AggregatePost!
}

input PostCreateInput {
  title: String!
  url: String
  content: String
  hidden: Boolean
  mediaLink: String
  isAdmin: Boolean
  author: UserCreateOneWithoutPostsInput!
  comments: CommentCreateManyWithoutPostInput
  flags: FlagCreateManyWithoutPostInput
  votes: VoteCreateManyWithoutPostInput
}

input PostCreateManyWithoutAuthorInput {
  create: [PostCreateWithoutAuthorInput!]
  connect: [PostWhereUniqueInput!]
}

input PostCreateOneWithoutCommentsInput {
  create: PostCreateWithoutCommentsInput
  connect: PostWhereUniqueInput
}

input PostCreateOneWithoutFlagsInput {
  create: PostCreateWithoutFlagsInput
  connect: PostWhereUniqueInput
}

input PostCreateOneWithoutVotesInput {
  create: PostCreateWithoutVotesInput
  connect: PostWhereUniqueInput
}

input PostCreateWithoutAuthorInput {
  title: String!
  url: String
  content: String
  hidden: Boolean
  mediaLink: String
  isAdmin: Boolean
  comments: CommentCreateManyWithoutPostInput
  flags: FlagCreateManyWithoutPostInput
  votes: VoteCreateManyWithoutPostInput
}

input PostCreateWithoutCommentsInput {
  title: String!
  url: String
  content: String
  hidden: Boolean
  mediaLink: String
  isAdmin: Boolean
  author: UserCreateOneWithoutPostsInput!
  flags: FlagCreateManyWithoutPostInput
  votes: VoteCreateManyWithoutPostInput
}

input PostCreateWithoutFlagsInput {
  title: String!
  url: String
  content: String
  hidden: Boolean
  mediaLink: String
  isAdmin: Boolean
  author: UserCreateOneWithoutPostsInput!
  comments: CommentCreateManyWithoutPostInput
  votes: VoteCreateManyWithoutPostInput
}

input PostCreateWithoutVotesInput {
  title: String!
  url: String
  content: String
  hidden: Boolean
  mediaLink: String
  isAdmin: Boolean
  author: UserCreateOneWithoutPostsInput!
  comments: CommentCreateManyWithoutPostInput
  flags: FlagCreateManyWithoutPostInput
}

"""
An edge in a connection.
"""
type PostEdge {
  """
  The item at the end of the edge.
  """
  node: Post!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum PostOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  title_ASC
  title_DESC
  url_ASC
  url_DESC
  content_ASC
  content_DESC
  hidden_ASC
  hidden_DESC
  mediaLink_ASC
  mediaLink_DESC
  isAdmin_ASC
  isAdmin_DESC
}

type PostPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  url: String
  content: String
  hidden: Boolean
  mediaLink: String
  isAdmin: Boolean
}

type PostSubscriptionPayload {
  mutation: MutationType!
  node: Post
  updatedFields: [String!]
  previousValues: PostPreviousValues
}

input PostSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [PostSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [PostSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PostWhereInput
}

input PostUpdateInput {
  title: String
  url: String
  content: String
  hidden: Boolean
  mediaLink: String
  isAdmin: Boolean
  author: UserUpdateOneWithoutPostsInput
  comments: CommentUpdateManyWithoutPostInput
  flags: FlagUpdateManyWithoutPostInput
  votes: VoteUpdateManyWithoutPostInput
}

input PostUpdateManyWithoutAuthorInput {
  create: [PostCreateWithoutAuthorInput!]
  connect: [PostWhereUniqueInput!]
  disconnect: [PostWhereUniqueInput!]
  delete: [PostWhereUniqueInput!]
  update: [PostUpdateWithoutAuthorInput!]
  upsert: [PostUpsertWithoutAuthorInput!]
}

input PostUpdateOneWithoutCommentsInput {
  create: PostCreateWithoutCommentsInput
  connect: PostWhereUniqueInput
  disconnect: PostWhereUniqueInput
  delete: PostWhereUniqueInput
  update: PostUpdateWithoutCommentsInput
  upsert: PostUpsertWithoutCommentsInput
}

input PostUpdateOneWithoutFlagsInput {
  create: PostCreateWithoutFlagsInput
  connect: PostWhereUniqueInput
  disconnect: PostWhereUniqueInput
  delete: PostWhereUniqueInput
  update: PostUpdateWithoutFlagsInput
  upsert: PostUpsertWithoutFlagsInput
}

input PostUpdateOneWithoutVotesInput {
  create: PostCreateWithoutVotesInput
  connect: PostWhereUniqueInput
  disconnect: PostWhereUniqueInput
  delete: PostWhereUniqueInput
  update: PostUpdateWithoutVotesInput
  upsert: PostUpsertWithoutVotesInput
}

input PostUpdateWithoutAuthorDataInput {
  title: String
  url: String
  content: String
  hidden: Boolean
  mediaLink: String
  isAdmin: Boolean
  comments: CommentUpdateManyWithoutPostInput
  flags: FlagUpdateManyWithoutPostInput
  votes: VoteUpdateManyWithoutPostInput
}

input PostUpdateWithoutAuthorInput {
  where: PostWhereUniqueInput!
  data: PostUpdateWithoutAuthorDataInput!
}

input PostUpdateWithoutCommentsDataInput {
  title: String
  url: String
  content: String
  hidden: Boolean
  mediaLink: String
  isAdmin: Boolean
  author: UserUpdateOneWithoutPostsInput
  flags: FlagUpdateManyWithoutPostInput
  votes: VoteUpdateManyWithoutPostInput
}

input PostUpdateWithoutCommentsInput {
  where: PostWhereUniqueInput!
  data: PostUpdateWithoutCommentsDataInput!
}

input PostUpdateWithoutFlagsDataInput {
  title: String
  url: String
  content: String
  hidden: Boolean
  mediaLink: String
  isAdmin: Boolean
  author: UserUpdateOneWithoutPostsInput
  comments: CommentUpdateManyWithoutPostInput
  votes: VoteUpdateManyWithoutPostInput
}

input PostUpdateWithoutFlagsInput {
  where: PostWhereUniqueInput!
  data: PostUpdateWithoutFlagsDataInput!
}

input PostUpdateWithoutVotesDataInput {
  title: String
  url: String
  content: String
  hidden: Boolean
  mediaLink: String
  isAdmin: Boolean
  author: UserUpdateOneWithoutPostsInput
  comments: CommentUpdateManyWithoutPostInput
  flags: FlagUpdateManyWithoutPostInput
}

input PostUpdateWithoutVotesInput {
  where: PostWhereUniqueInput!
  data: PostUpdateWithoutVotesDataInput!
}

input PostUpsertWithoutAuthorInput {
  where: PostWhereUniqueInput!
  update: PostUpdateWithoutAuthorDataInput!
  create: PostCreateWithoutAuthorInput!
}

input PostUpsertWithoutCommentsInput {
  where: PostWhereUniqueInput!
  update: PostUpdateWithoutCommentsDataInput!
  create: PostCreateWithoutCommentsInput!
}

input PostUpsertWithoutFlagsInput {
  where: PostWhereUniqueInput!
  update: PostUpdateWithoutFlagsDataInput!
  create: PostCreateWithoutFlagsInput!
}

input PostUpsertWithoutVotesInput {
  where: PostWhereUniqueInput!
  update: PostUpdateWithoutVotesDataInput!
  create: PostCreateWithoutVotesInput!
}

input PostWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [PostWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [PostWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  createdAt: DateTime
  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime
  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  createdAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime
  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime
  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime
  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime
  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
  title: String
  """
  All values that are not equal to given value.
  """
  title_not: String
  """
  All values that are contained in given list.
  """
  title_in: [String!]
  """
  All values that are not contained in given list.
  """
  title_not_in: [String!]
  """
  All values less than the given value.
  """
  title_lt: String
  """
  All values less than or equal the given value.
  """
  title_lte: String
  """
  All values greater than the given value.
  """
  title_gt: String
  """
  All values greater than or equal the given value.
  """
  title_gte: String
  """
  All values containing the given string.
  """
  title_contains: String
  """
  All values not containing the given string.
  """
  title_not_contains: String
  """
  All values starting with the given string.
  """
  title_starts_with: String
  """
  All values not starting with the given string.
  """
  title_not_starts_with: String
  """
  All values ending with the given string.
  """
  title_ends_with: String
  """
  All values not ending with the given string.
  """
  title_not_ends_with: String
  url: String
  """
  All values that are not equal to given value.
  """
  url_not: String
  """
  All values that are contained in given list.
  """
  url_in: [String!]
  """
  All values that are not contained in given list.
  """
  url_not_in: [String!]
  """
  All values less than the given value.
  """
  url_lt: String
  """
  All values less than or equal the given value.
  """
  url_lte: String
  """
  All values greater than the given value.
  """
  url_gt: String
  """
  All values greater than or equal the given value.
  """
  url_gte: String
  """
  All values containing the given string.
  """
  url_contains: String
  """
  All values not containing the given string.
  """
  url_not_contains: String
  """
  All values starting with the given string.
  """
  url_starts_with: String
  """
  All values not starting with the given string.
  """
  url_not_starts_with: String
  """
  All values ending with the given string.
  """
  url_ends_with: String
  """
  All values not ending with the given string.
  """
  url_not_ends_with: String
  content: String
  """
  All values that are not equal to given value.
  """
  content_not: String
  """
  All values that are contained in given list.
  """
  content_in: [String!]
  """
  All values that are not contained in given list.
  """
  content_not_in: [String!]
  """
  All values less than the given value.
  """
  content_lt: String
  """
  All values less than or equal the given value.
  """
  content_lte: String
  """
  All values greater than the given value.
  """
  content_gt: String
  """
  All values greater than or equal the given value.
  """
  content_gte: String
  """
  All values containing the given string.
  """
  content_contains: String
  """
  All values not containing the given string.
  """
  content_not_contains: String
  """
  All values starting with the given string.
  """
  content_starts_with: String
  """
  All values not starting with the given string.
  """
  content_not_starts_with: String
  """
  All values ending with the given string.
  """
  content_ends_with: String
  """
  All values not ending with the given string.
  """
  content_not_ends_with: String
  hidden: Boolean
  """
  All values that are not equal to given value.
  """
  hidden_not: Boolean
  mediaLink: String
  """
  All values that are not equal to given value.
  """
  mediaLink_not: String
  """
  All values that are contained in given list.
  """
  mediaLink_in: [String!]
  """
  All values that are not contained in given list.
  """
  mediaLink_not_in: [String!]
  """
  All values less than the given value.
  """
  mediaLink_lt: String
  """
  All values less than or equal the given value.
  """
  mediaLink_lte: String
  """
  All values greater than the given value.
  """
  mediaLink_gt: String
  """
  All values greater than or equal the given value.
  """
  mediaLink_gte: String
  """
  All values containing the given string.
  """
  mediaLink_contains: String
  """
  All values not containing the given string.
  """
  mediaLink_not_contains: String
  """
  All values starting with the given string.
  """
  mediaLink_starts_with: String
  """
  All values not starting with the given string.
  """
  mediaLink_not_starts_with: String
  """
  All values ending with the given string.
  """
  mediaLink_ends_with: String
  """
  All values not ending with the given string.
  """
  mediaLink_not_ends_with: String
  isAdmin: Boolean
  """
  All values that are not equal to given value.
  """
  isAdmin_not: Boolean
  author: UserWhereInput
  comments_every: CommentWhereInput
  comments_some: CommentWhereInput
  comments_none: CommentWhereInput
  flags_every: FlagWhereInput
  flags_some: FlagWhereInput
  flags_none: FlagWhereInput
  votes_every: VoteWhereInput
  votes_some: VoteWhereInput
  votes_none: VoteWhereInput
}

input PostWhereUniqueInput {
  id: ID
}

type Query {
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post]!
  votes(where: VoteWhereInput, orderBy: VoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Vote]!
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment]!
  flags(where: FlagWhereInput, orderBy: FlagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Flag]!
  user(where: UserWhereUniqueInput!): User
  post(where: PostWhereUniqueInput!): Post
  vote(where: VoteWhereUniqueInput!): Vote
  comment(where: CommentWhereUniqueInput!): Comment
  flag(where: FlagWhereUniqueInput!): Flag
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  postsConnection(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PostConnection!
  votesConnection(where: VoteWhereInput, orderBy: VoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): VoteConnection!
  commentsConnection(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CommentConnection!
  flagsConnection(where: FlagWhereInput, orderBy: FlagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FlagConnection!
  """
  Fetches an object given its ID
  """
  node("""
  The ID of an object
  """
  id: ID!): Node
}

type Subscription {
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  post(where: PostSubscriptionWhereInput): PostSubscriptionPayload
  vote(where: VoteSubscriptionWhereInput): VoteSubscriptionPayload
  comment(where: CommentSubscriptionWhereInput): CommentSubscriptionPayload
  flag(where: FlagSubscriptionWhereInput): FlagSubscriptionPayload
}

enum USER_TYPE {
  ADMIN
  MODERATOR
  NORMAL
}

"""
A connection to a list of items.
"""
type UserConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  facebookUserId: String
  facebookEmail: String
  email: String
  username: String
  password: String
  name: String
  admin: Boolean
  about: String
  userType: USER_TYPE
  posts: PostCreateManyWithoutAuthorInput
  comments: CommentCreateManyWithoutAuthorInput
  flagsReportedAboutOthers: FlagCreateManyWithoutCreatorInput
  flagsReportedAboutThisUser: FlagCreateManyWithoutReportedUserInput
}

input UserCreateOneWithoutCommentsInput {
  create: UserCreateWithoutCommentsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutFlagsReportedAboutOthersInput {
  create: UserCreateWithoutFlagsReportedAboutOthersInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutFlagsReportedAboutThisUserInput {
  create: UserCreateWithoutFlagsReportedAboutThisUserInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutPostsInput {
  create: UserCreateWithoutPostsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutCommentsInput {
  facebookUserId: String
  facebookEmail: String
  email: String
  username: String
  password: String
  name: String
  admin: Boolean
  about: String
  userType: USER_TYPE
  posts: PostCreateManyWithoutAuthorInput
  flagsReportedAboutOthers: FlagCreateManyWithoutCreatorInput
  flagsReportedAboutThisUser: FlagCreateManyWithoutReportedUserInput
}

input UserCreateWithoutFlagsReportedAboutOthersInput {
  facebookUserId: String
  facebookEmail: String
  email: String
  username: String
  password: String
  name: String
  admin: Boolean
  about: String
  userType: USER_TYPE
  posts: PostCreateManyWithoutAuthorInput
  comments: CommentCreateManyWithoutAuthorInput
  flagsReportedAboutThisUser: FlagCreateManyWithoutReportedUserInput
}

input UserCreateWithoutFlagsReportedAboutThisUserInput {
  facebookUserId: String
  facebookEmail: String
  email: String
  username: String
  password: String
  name: String
  admin: Boolean
  about: String
  userType: USER_TYPE
  posts: PostCreateManyWithoutAuthorInput
  comments: CommentCreateManyWithoutAuthorInput
  flagsReportedAboutOthers: FlagCreateManyWithoutCreatorInput
}

input UserCreateWithoutPostsInput {
  facebookUserId: String
  facebookEmail: String
  email: String
  username: String
  password: String
  name: String
  admin: Boolean
  about: String
  userType: USER_TYPE
  comments: CommentCreateManyWithoutAuthorInput
  flagsReportedAboutOthers: FlagCreateManyWithoutCreatorInput
  flagsReportedAboutThisUser: FlagCreateManyWithoutReportedUserInput
}

"""
An edge in a connection.
"""
type UserEdge {
  """
  The item at the end of the edge.
  """
  node: User!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  facebookUserId_ASC
  facebookUserId_DESC
  facebookEmail_ASC
  facebookEmail_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  email_ASC
  email_DESC
  username_ASC
  username_DESC
  password_ASC
  password_DESC
  name_ASC
  name_DESC
  admin_ASC
  admin_DESC
  about_ASC
  about_DESC
  userType_ASC
  userType_DESC
}

type UserPreviousValues {
  id: ID!
  facebookUserId: String
  facebookEmail: String
  createdAt: DateTime!
  updatedAt: DateTime!
  email: String
  username: String
  password: String
  name: String
  admin: Boolean
  about: String
  userType: USER_TYPE
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [UserSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [UserSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  facebookUserId: String
  facebookEmail: String
  email: String
  username: String
  password: String
  name: String
  admin: Boolean
  about: String
  userType: USER_TYPE
  posts: PostUpdateManyWithoutAuthorInput
  comments: CommentUpdateManyWithoutAuthorInput
  flagsReportedAboutOthers: FlagUpdateManyWithoutCreatorInput
  flagsReportedAboutThisUser: FlagUpdateManyWithoutReportedUserInput
}

input UserUpdateOneWithoutCommentsInput {
  create: UserCreateWithoutCommentsInput
  connect: UserWhereUniqueInput
  disconnect: UserWhereUniqueInput
  delete: UserWhereUniqueInput
  update: UserUpdateWithoutCommentsInput
  upsert: UserUpsertWithoutCommentsInput
}

input UserUpdateOneWithoutFlagsReportedAboutOthersInput {
  create: UserCreateWithoutFlagsReportedAboutOthersInput
  connect: UserWhereUniqueInput
  disconnect: UserWhereUniqueInput
  delete: UserWhereUniqueInput
  update: UserUpdateWithoutFlagsReportedAboutOthersInput
  upsert: UserUpsertWithoutFlagsReportedAboutOthersInput
}

input UserUpdateOneWithoutFlagsReportedAboutThisUserInput {
  create: UserCreateWithoutFlagsReportedAboutThisUserInput
  connect: UserWhereUniqueInput
  disconnect: UserWhereUniqueInput
  delete: UserWhereUniqueInput
  update: UserUpdateWithoutFlagsReportedAboutThisUserInput
  upsert: UserUpsertWithoutFlagsReportedAboutThisUserInput
}

input UserUpdateOneWithoutPostsInput {
  create: UserCreateWithoutPostsInput
  connect: UserWhereUniqueInput
  disconnect: UserWhereUniqueInput
  delete: UserWhereUniqueInput
  update: UserUpdateWithoutPostsInput
  upsert: UserUpsertWithoutPostsInput
}

input UserUpdateWithoutCommentsDataInput {
  facebookUserId: String
  facebookEmail: String
  email: String
  username: String
  password: String
  name: String
  admin: Boolean
  about: String
  userType: USER_TYPE
  posts: PostUpdateManyWithoutAuthorInput
  flagsReportedAboutOthers: FlagUpdateManyWithoutCreatorInput
  flagsReportedAboutThisUser: FlagUpdateManyWithoutReportedUserInput
}

input UserUpdateWithoutCommentsInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutCommentsDataInput!
}

input UserUpdateWithoutFlagsReportedAboutOthersDataInput {
  facebookUserId: String
  facebookEmail: String
  email: String
  username: String
  password: String
  name: String
  admin: Boolean
  about: String
  userType: USER_TYPE
  posts: PostUpdateManyWithoutAuthorInput
  comments: CommentUpdateManyWithoutAuthorInput
  flagsReportedAboutThisUser: FlagUpdateManyWithoutReportedUserInput
}

input UserUpdateWithoutFlagsReportedAboutOthersInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutFlagsReportedAboutOthersDataInput!
}

input UserUpdateWithoutFlagsReportedAboutThisUserDataInput {
  facebookUserId: String
  facebookEmail: String
  email: String
  username: String
  password: String
  name: String
  admin: Boolean
  about: String
  userType: USER_TYPE
  posts: PostUpdateManyWithoutAuthorInput
  comments: CommentUpdateManyWithoutAuthorInput
  flagsReportedAboutOthers: FlagUpdateManyWithoutCreatorInput
}

input UserUpdateWithoutFlagsReportedAboutThisUserInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutFlagsReportedAboutThisUserDataInput!
}

input UserUpdateWithoutPostsDataInput {
  facebookUserId: String
  facebookEmail: String
  email: String
  username: String
  password: String
  name: String
  admin: Boolean
  about: String
  userType: USER_TYPE
  comments: CommentUpdateManyWithoutAuthorInput
  flagsReportedAboutOthers: FlagUpdateManyWithoutCreatorInput
  flagsReportedAboutThisUser: FlagUpdateManyWithoutReportedUserInput
}

input UserUpdateWithoutPostsInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutPostsDataInput!
}

input UserUpsertWithoutCommentsInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutCommentsDataInput!
  create: UserCreateWithoutCommentsInput!
}

input UserUpsertWithoutFlagsReportedAboutOthersInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutFlagsReportedAboutOthersDataInput!
  create: UserCreateWithoutFlagsReportedAboutOthersInput!
}

input UserUpsertWithoutFlagsReportedAboutThisUserInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutFlagsReportedAboutThisUserDataInput!
  create: UserCreateWithoutFlagsReportedAboutThisUserInput!
}

input UserUpsertWithoutPostsInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutPostsDataInput!
  create: UserCreateWithoutPostsInput!
}

input UserWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [UserWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [UserWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  facebookUserId: String
  """
  All values that are not equal to given value.
  """
  facebookUserId_not: String
  """
  All values that are contained in given list.
  """
  facebookUserId_in: [String!]
  """
  All values that are not contained in given list.
  """
  facebookUserId_not_in: [String!]
  """
  All values less than the given value.
  """
  facebookUserId_lt: String
  """
  All values less than or equal the given value.
  """
  facebookUserId_lte: String
  """
  All values greater than the given value.
  """
  facebookUserId_gt: String
  """
  All values greater than or equal the given value.
  """
  facebookUserId_gte: String
  """
  All values containing the given string.
  """
  facebookUserId_contains: String
  """
  All values not containing the given string.
  """
  facebookUserId_not_contains: String
  """
  All values starting with the given string.
  """
  facebookUserId_starts_with: String
  """
  All values not starting with the given string.
  """
  facebookUserId_not_starts_with: String
  """
  All values ending with the given string.
  """
  facebookUserId_ends_with: String
  """
  All values not ending with the given string.
  """
  facebookUserId_not_ends_with: String
  facebookEmail: String
  """
  All values that are not equal to given value.
  """
  facebookEmail_not: String
  """
  All values that are contained in given list.
  """
  facebookEmail_in: [String!]
  """
  All values that are not contained in given list.
  """
  facebookEmail_not_in: [String!]
  """
  All values less than the given value.
  """
  facebookEmail_lt: String
  """
  All values less than or equal the given value.
  """
  facebookEmail_lte: String
  """
  All values greater than the given value.
  """
  facebookEmail_gt: String
  """
  All values greater than or equal the given value.
  """
  facebookEmail_gte: String
  """
  All values containing the given string.
  """
  facebookEmail_contains: String
  """
  All values not containing the given string.
  """
  facebookEmail_not_contains: String
  """
  All values starting with the given string.
  """
  facebookEmail_starts_with: String
  """
  All values not starting with the given string.
  """
  facebookEmail_not_starts_with: String
  """
  All values ending with the given string.
  """
  facebookEmail_ends_with: String
  """
  All values not ending with the given string.
  """
  facebookEmail_not_ends_with: String
  createdAt: DateTime
  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime
  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  createdAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime
  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime
  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime
  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime
  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
  email: String
  """
  All values that are not equal to given value.
  """
  email_not: String
  """
  All values that are contained in given list.
  """
  email_in: [String!]
  """
  All values that are not contained in given list.
  """
  email_not_in: [String!]
  """
  All values less than the given value.
  """
  email_lt: String
  """
  All values less than or equal the given value.
  """
  email_lte: String
  """
  All values greater than the given value.
  """
  email_gt: String
  """
  All values greater than or equal the given value.
  """
  email_gte: String
  """
  All values containing the given string.
  """
  email_contains: String
  """
  All values not containing the given string.
  """
  email_not_contains: String
  """
  All values starting with the given string.
  """
  email_starts_with: String
  """
  All values not starting with the given string.
  """
  email_not_starts_with: String
  """
  All values ending with the given string.
  """
  email_ends_with: String
  """
  All values not ending with the given string.
  """
  email_not_ends_with: String
  username: String
  """
  All values that are not equal to given value.
  """
  username_not: String
  """
  All values that are contained in given list.
  """
  username_in: [String!]
  """
  All values that are not contained in given list.
  """
  username_not_in: [String!]
  """
  All values less than the given value.
  """
  username_lt: String
  """
  All values less than or equal the given value.
  """
  username_lte: String
  """
  All values greater than the given value.
  """
  username_gt: String
  """
  All values greater than or equal the given value.
  """
  username_gte: String
  """
  All values containing the given string.
  """
  username_contains: String
  """
  All values not containing the given string.
  """
  username_not_contains: String
  """
  All values starting with the given string.
  """
  username_starts_with: String
  """
  All values not starting with the given string.
  """
  username_not_starts_with: String
  """
  All values ending with the given string.
  """
  username_ends_with: String
  """
  All values not ending with the given string.
  """
  username_not_ends_with: String
  password: String
  """
  All values that are not equal to given value.
  """
  password_not: String
  """
  All values that are contained in given list.
  """
  password_in: [String!]
  """
  All values that are not contained in given list.
  """
  password_not_in: [String!]
  """
  All values less than the given value.
  """
  password_lt: String
  """
  All values less than or equal the given value.
  """
  password_lte: String
  """
  All values greater than the given value.
  """
  password_gt: String
  """
  All values greater than or equal the given value.
  """
  password_gte: String
  """
  All values containing the given string.
  """
  password_contains: String
  """
  All values not containing the given string.
  """
  password_not_contains: String
  """
  All values starting with the given string.
  """
  password_starts_with: String
  """
  All values not starting with the given string.
  """
  password_not_starts_with: String
  """
  All values ending with the given string.
  """
  password_ends_with: String
  """
  All values not ending with the given string.
  """
  password_not_ends_with: String
  name: String
  """
  All values that are not equal to given value.
  """
  name_not: String
  """
  All values that are contained in given list.
  """
  name_in: [String!]
  """
  All values that are not contained in given list.
  """
  name_not_in: [String!]
  """
  All values less than the given value.
  """
  name_lt: String
  """
  All values less than or equal the given value.
  """
  name_lte: String
  """
  All values greater than the given value.
  """
  name_gt: String
  """
  All values greater than or equal the given value.
  """
  name_gte: String
  """
  All values containing the given string.
  """
  name_contains: String
  """
  All values not containing the given string.
  """
  name_not_contains: String
  """
  All values starting with the given string.
  """
  name_starts_with: String
  """
  All values not starting with the given string.
  """
  name_not_starts_with: String
  """
  All values ending with the given string.
  """
  name_ends_with: String
  """
  All values not ending with the given string.
  """
  name_not_ends_with: String
  admin: Boolean
  """
  All values that are not equal to given value.
  """
  admin_not: Boolean
  about: String
  """
  All values that are not equal to given value.
  """
  about_not: String
  """
  All values that are contained in given list.
  """
  about_in: [String!]
  """
  All values that are not contained in given list.
  """
  about_not_in: [String!]
  """
  All values less than the given value.
  """
  about_lt: String
  """
  All values less than or equal the given value.
  """
  about_lte: String
  """
  All values greater than the given value.
  """
  about_gt: String
  """
  All values greater than or equal the given value.
  """
  about_gte: String
  """
  All values containing the given string.
  """
  about_contains: String
  """
  All values not containing the given string.
  """
  about_not_contains: String
  """
  All values starting with the given string.
  """
  about_starts_with: String
  """
  All values not starting with the given string.
  """
  about_not_starts_with: String
  """
  All values ending with the given string.
  """
  about_ends_with: String
  """
  All values not ending with the given string.
  """
  about_not_ends_with: String
  userType: USER_TYPE
  """
  All values that are not equal to given value.
  """
  userType_not: USER_TYPE
  """
  All values that are contained in given list.
  """
  userType_in: [USER_TYPE!]
  """
  All values that are not contained in given list.
  """
  userType_not_in: [USER_TYPE!]
  posts_every: PostWhereInput
  posts_some: PostWhereInput
  posts_none: PostWhereInput
  comments_every: CommentWhereInput
  comments_some: CommentWhereInput
  comments_none: CommentWhereInput
  flagsReportedAboutOthers_every: FlagWhereInput
  flagsReportedAboutOthers_some: FlagWhereInput
  flagsReportedAboutOthers_none: FlagWhereInput
  flagsReportedAboutThisUser_every: FlagWhereInput
  flagsReportedAboutThisUser_some: FlagWhereInput
  flagsReportedAboutThisUser_none: FlagWhereInput
}

input UserWhereUniqueInput {
  id: ID
  facebookUserId: String
  username: String
}

"""
A connection to a list of items.
"""
type VoteConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [VoteEdge]!
  aggregate: AggregateVote!
}

input VoteCreateInput {
  score: Int!
  contentType: CONTENT_TYPE!
  comment: CommentCreateOneWithoutVotesInput
  post: PostCreateOneWithoutVotesInput!
}

input VoteCreateManyWithoutCommentInput {
  create: [VoteCreateWithoutCommentInput!]
  connect: [VoteWhereUniqueInput!]
}

input VoteCreateManyWithoutPostInput {
  create: [VoteCreateWithoutPostInput!]
  connect: [VoteWhereUniqueInput!]
}

input VoteCreateWithoutCommentInput {
  score: Int!
  contentType: CONTENT_TYPE!
  post: PostCreateOneWithoutVotesInput!
}

input VoteCreateWithoutPostInput {
  score: Int!
  contentType: CONTENT_TYPE!
  comment: CommentCreateOneWithoutVotesInput
}

"""
An edge in a connection.
"""
type VoteEdge {
  """
  The item at the end of the edge.
  """
  node: Vote!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum VoteOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  score_ASC
  score_DESC
  contentType_ASC
  contentType_DESC
}

type VotePreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  score: Int!
  contentType: CONTENT_TYPE!
}

type VoteSubscriptionPayload {
  mutation: MutationType!
  node: Vote
  updatedFields: [String!]
  previousValues: VotePreviousValues
}

input VoteSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [VoteSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [VoteSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: VoteWhereInput
}

input VoteUpdateInput {
  score: Int
  contentType: CONTENT_TYPE
  comment: CommentUpdateOneWithoutVotesInput
  post: PostUpdateOneWithoutVotesInput
}

input VoteUpdateManyWithoutCommentInput {
  create: [VoteCreateWithoutCommentInput!]
  connect: [VoteWhereUniqueInput!]
  disconnect: [VoteWhereUniqueInput!]
  delete: [VoteWhereUniqueInput!]
  update: [VoteUpdateWithoutCommentInput!]
  upsert: [VoteUpsertWithoutCommentInput!]
}

input VoteUpdateManyWithoutPostInput {
  create: [VoteCreateWithoutPostInput!]
  connect: [VoteWhereUniqueInput!]
  disconnect: [VoteWhereUniqueInput!]
  delete: [VoteWhereUniqueInput!]
  update: [VoteUpdateWithoutPostInput!]
  upsert: [VoteUpsertWithoutPostInput!]
}

input VoteUpdateWithoutCommentDataInput {
  score: Int
  contentType: CONTENT_TYPE
  post: PostUpdateOneWithoutVotesInput
}

input VoteUpdateWithoutCommentInput {
  where: VoteWhereUniqueInput!
  data: VoteUpdateWithoutCommentDataInput!
}

input VoteUpdateWithoutPostDataInput {
  score: Int
  contentType: CONTENT_TYPE
  comment: CommentUpdateOneWithoutVotesInput
}

input VoteUpdateWithoutPostInput {
  where: VoteWhereUniqueInput!
  data: VoteUpdateWithoutPostDataInput!
}

input VoteUpsertWithoutCommentInput {
  where: VoteWhereUniqueInput!
  update: VoteUpdateWithoutCommentDataInput!
  create: VoteCreateWithoutCommentInput!
}

input VoteUpsertWithoutPostInput {
  where: VoteWhereUniqueInput!
  update: VoteUpdateWithoutPostDataInput!
  create: VoteCreateWithoutPostInput!
}

input VoteWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [VoteWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [VoteWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  createdAt: DateTime
  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime
  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  createdAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime
  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime
  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime
  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime
  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
  score: Int
  """
  All values that are not equal to given value.
  """
  score_not: Int
  """
  All values that are contained in given list.
  """
  score_in: [Int!]
  """
  All values that are not contained in given list.
  """
  score_not_in: [Int!]
  """
  All values less than the given value.
  """
  score_lt: Int
  """
  All values less than or equal the given value.
  """
  score_lte: Int
  """
  All values greater than the given value.
  """
  score_gt: Int
  """
  All values greater than or equal the given value.
  """
  score_gte: Int
  contentType: CONTENT_TYPE
  """
  All values that are not equal to given value.
  """
  contentType_not: CONTENT_TYPE
  """
  All values that are contained in given list.
  """
  contentType_in: [CONTENT_TYPE!]
  """
  All values that are not contained in given list.
  """
  contentType_not_in: [CONTENT_TYPE!]
  comment: CommentWhereInput
  post: PostWhereInput
}

input VoteWhereUniqueInput {
  id: ID
}
`

export type UserOrderByInput = 
  'id_ASC' |
  'id_DESC' |
  'facebookUserId_ASC' |
  'facebookUserId_DESC' |
  'facebookEmail_ASC' |
  'facebookEmail_DESC' |
  'createdAt_ASC' |
  'createdAt_DESC' |
  'updatedAt_ASC' |
  'updatedAt_DESC' |
  'email_ASC' |
  'email_DESC' |
  'username_ASC' |
  'username_DESC' |
  'password_ASC' |
  'password_DESC' |
  'name_ASC' |
  'name_DESC' |
  'admin_ASC' |
  'admin_DESC' |
  'about_ASC' |
  'about_DESC' |
  'userType_ASC' |
  'userType_DESC'

export type CONTENT_TYPE = 
  'POST' |
  'COMMENT'

export type PostOrderByInput = 
  'id_ASC' |
  'id_DESC' |
  'createdAt_ASC' |
  'createdAt_DESC' |
  'updatedAt_ASC' |
  'updatedAt_DESC' |
  'title_ASC' |
  'title_DESC' |
  'url_ASC' |
  'url_DESC' |
  'content_ASC' |
  'content_DESC' |
  'hidden_ASC' |
  'hidden_DESC' |
  'mediaLink_ASC' |
  'mediaLink_DESC' |
  'isAdmin_ASC' |
  'isAdmin_DESC'

export type CommentOrderByInput = 
  'id_ASC' |
  'id_DESC' |
  'createdAt_ASC' |
  'createdAt_DESC' |
  'updatedAt_ASC' |
  'updatedAt_DESC' |
  'content_ASC' |
  'content_DESC' |
  'directParentType_ASC' |
  'directParentType_DESC'

export type USER_TYPE = 
  'ADMIN' |
  'MODERATOR' |
  'NORMAL'

export type VoteOrderByInput = 
  'id_ASC' |
  'id_DESC' |
  'createdAt_ASC' |
  'createdAt_DESC' |
  'updatedAt_ASC' |
  'updatedAt_DESC' |
  'score_ASC' |
  'score_DESC' |
  'contentType_ASC' |
  'contentType_DESC'

export type FlagOrderByInput = 
  'id_ASC' |
  'id_DESC' |
  'createdAt_ASC' |
  'createdAt_DESC' |
  'updatedAt_ASC' |
  'updatedAt_DESC' |
  'reportedContentType_ASC' |
  'reportedContentType_DESC'

export type MutationType = 
  'CREATED' |
  'UPDATED' |
  'DELETED'

export interface CommentUpdateWithoutPostInput {
  where: CommentWhereUniqueInput
  data: CommentUpdateWithoutPostDataInput
}

export interface UserWhereInput {
  AND?: UserWhereInput[] | UserWhereInput
  OR?: UserWhereInput[] | UserWhereInput
  id?: ID_Input
  id_not?: ID_Input
  id_in?: ID_Input[] | ID_Input
  id_not_in?: ID_Input[] | ID_Input
  id_lt?: ID_Input
  id_lte?: ID_Input
  id_gt?: ID_Input
  id_gte?: ID_Input
  id_contains?: ID_Input
  id_not_contains?: ID_Input
  id_starts_with?: ID_Input
  id_not_starts_with?: ID_Input
  id_ends_with?: ID_Input
  id_not_ends_with?: ID_Input
  facebookUserId?: String
  facebookUserId_not?: String
  facebookUserId_in?: String[] | String
  facebookUserId_not_in?: String[] | String
  facebookUserId_lt?: String
  facebookUserId_lte?: String
  facebookUserId_gt?: String
  facebookUserId_gte?: String
  facebookUserId_contains?: String
  facebookUserId_not_contains?: String
  facebookUserId_starts_with?: String
  facebookUserId_not_starts_with?: String
  facebookUserId_ends_with?: String
  facebookUserId_not_ends_with?: String
  facebookEmail?: String
  facebookEmail_not?: String
  facebookEmail_in?: String[] | String
  facebookEmail_not_in?: String[] | String
  facebookEmail_lt?: String
  facebookEmail_lte?: String
  facebookEmail_gt?: String
  facebookEmail_gte?: String
  facebookEmail_contains?: String
  facebookEmail_not_contains?: String
  facebookEmail_starts_with?: String
  facebookEmail_not_starts_with?: String
  facebookEmail_ends_with?: String
  facebookEmail_not_ends_with?: String
  createdAt?: DateTime
  createdAt_not?: DateTime
  createdAt_in?: DateTime[] | DateTime
  createdAt_not_in?: DateTime[] | DateTime
  createdAt_lt?: DateTime
  createdAt_lte?: DateTime
  createdAt_gt?: DateTime
  createdAt_gte?: DateTime
  updatedAt?: DateTime
  updatedAt_not?: DateTime
  updatedAt_in?: DateTime[] | DateTime
  updatedAt_not_in?: DateTime[] | DateTime
  updatedAt_lt?: DateTime
  updatedAt_lte?: DateTime
  updatedAt_gt?: DateTime
  updatedAt_gte?: DateTime
  email?: String
  email_not?: String
  email_in?: String[] | String
  email_not_in?: String[] | String
  email_lt?: String
  email_lte?: String
  email_gt?: String
  email_gte?: String
  email_contains?: String
  email_not_contains?: String
  email_starts_with?: String
  email_not_starts_with?: String
  email_ends_with?: String
  email_not_ends_with?: String
  username?: String
  username_not?: String
  username_in?: String[] | String
  username_not_in?: String[] | String
  username_lt?: String
  username_lte?: String
  username_gt?: String
  username_gte?: String
  username_contains?: String
  username_not_contains?: String
  username_starts_with?: String
  username_not_starts_with?: String
  username_ends_with?: String
  username_not_ends_with?: String
  password?: String
  password_not?: String
  password_in?: String[] | String
  password_not_in?: String[] | String
  password_lt?: String
  password_lte?: String
  password_gt?: String
  password_gte?: String
  password_contains?: String
  password_not_contains?: String
  password_starts_with?: String
  password_not_starts_with?: String
  password_ends_with?: String
  password_not_ends_with?: String
  name?: String
  name_not?: String
  name_in?: String[] | String
  name_not_in?: String[] | String
  name_lt?: String
  name_lte?: String
  name_gt?: String
  name_gte?: String
  name_contains?: String
  name_not_contains?: String
  name_starts_with?: String
  name_not_starts_with?: String
  name_ends_with?: String
  name_not_ends_with?: String
  admin?: Boolean
  admin_not?: Boolean
  about?: String
  about_not?: String
  about_in?: String[] | String
  about_not_in?: String[] | String
  about_lt?: String
  about_lte?: String
  about_gt?: String
  about_gte?: String
  about_contains?: String
  about_not_contains?: String
  about_starts_with?: String
  about_not_starts_with?: String
  about_ends_with?: String
  about_not_ends_with?: String
  userType?: USER_TYPE
  userType_not?: USER_TYPE
  userType_in?: USER_TYPE[] | USER_TYPE
  userType_not_in?: USER_TYPE[] | USER_TYPE
  posts_every?: PostWhereInput
  posts_some?: PostWhereInput
  posts_none?: PostWhereInput
  comments_every?: CommentWhereInput
  comments_some?: CommentWhereInput
  comments_none?: CommentWhereInput
  flagsReportedAboutOthers_every?: FlagWhereInput
  flagsReportedAboutOthers_some?: FlagWhereInput
  flagsReportedAboutOthers_none?: FlagWhereInput
  flagsReportedAboutThisUser_every?: FlagWhereInput
  flagsReportedAboutThisUser_some?: FlagWhereInput
  flagsReportedAboutThisUser_none?: FlagWhereInput
}

export interface CommentCreateOneWithoutVotesInput {
  create?: CommentCreateWithoutVotesInput
  connect?: CommentWhereUniqueInput
}

export interface FlagUpdateManyWithoutCommentInput {
  create?: FlagCreateWithoutCommentInput[] | FlagCreateWithoutCommentInput
  connect?: FlagWhereUniqueInput[] | FlagWhereUniqueInput
  disconnect?: FlagWhereUniqueInput[] | FlagWhereUniqueInput
  delete?: FlagWhereUniqueInput[] | FlagWhereUniqueInput
  update?: FlagUpdateWithoutCommentInput[] | FlagUpdateWithoutCommentInput
  upsert?: FlagUpsertWithoutCommentInput[] | FlagUpsertWithoutCommentInput
}

export interface CommentCreateWithoutVotesInput {
  content: String
  directParentType: CONTENT_TYPE
  author: UserCreateOneWithoutCommentsInput
  post: PostCreateOneWithoutCommentsInput
  flags?: FlagCreateManyWithoutCommentInput
}

export interface FlagUpdateManyWithoutCreatorInput {
  create?: FlagCreateWithoutCreatorInput[] | FlagCreateWithoutCreatorInput
  connect?: FlagWhereUniqueInput[] | FlagWhereUniqueInput
  disconnect?: FlagWhereUniqueInput[] | FlagWhereUniqueInput
  delete?: FlagWhereUniqueInput[] | FlagWhereUniqueInput
  update?: FlagUpdateWithoutCreatorInput[] | FlagUpdateWithoutCreatorInput
  upsert?: FlagUpsertWithoutCreatorInput[] | FlagUpsertWithoutCreatorInput
}

export interface FlagCreateManyWithoutCommentInput {
  create?: FlagCreateWithoutCommentInput[] | FlagCreateWithoutCommentInput
  connect?: FlagWhereUniqueInput[] | FlagWhereUniqueInput
}

export interface FlagSubscriptionWhereInput {
  AND?: FlagSubscriptionWhereInput[] | FlagSubscriptionWhereInput
  OR?: FlagSubscriptionWhereInput[] | FlagSubscriptionWhereInput
  mutation_in?: MutationType[] | MutationType
  updatedFields_contains?: String
  updatedFields_contains_every?: String[] | String
  updatedFields_contains_some?: String[] | String
  node?: FlagWhereInput
}

export interface FlagCreateWithoutCommentInput {
  reportedContentType: CONTENT_TYPE
  creator: UserCreateOneWithoutFlagsReportedAboutOthersInput
  reportedUser: UserCreateOneWithoutFlagsReportedAboutThisUserInput
  post: PostCreateOneWithoutFlagsInput
}

export interface CommentWhereInput {
  AND?: CommentWhereInput[] | CommentWhereInput
  OR?: CommentWhereInput[] | CommentWhereInput
  id?: ID_Input
  id_not?: ID_Input
  id_in?: ID_Input[] | ID_Input
  id_not_in?: ID_Input[] | ID_Input
  id_lt?: ID_Input
  id_lte?: ID_Input
  id_gt?: ID_Input
  id_gte?: ID_Input
  id_contains?: ID_Input
  id_not_contains?: ID_Input
  id_starts_with?: ID_Input
  id_not_starts_with?: ID_Input
  id_ends_with?: ID_Input
  id_not_ends_with?: ID_Input
  createdAt?: DateTime
  createdAt_not?: DateTime
  createdAt_in?: DateTime[] | DateTime
  createdAt_not_in?: DateTime[] | DateTime
  createdAt_lt?: DateTime
  createdAt_lte?: DateTime
  createdAt_gt?: DateTime
  createdAt_gte?: DateTime
  updatedAt?: DateTime
  updatedAt_not?: DateTime
  updatedAt_in?: DateTime[] | DateTime
  updatedAt_not_in?: DateTime[] | DateTime
  updatedAt_lt?: DateTime
  updatedAt_lte?: DateTime
  updatedAt_gt?: DateTime
  updatedAt_gte?: DateTime
  content?: String
  content_not?: String
  content_in?: String[] | String
  content_not_in?: String[] | String
  content_lt?: String
  content_lte?: String
  content_gt?: String
  content_gte?: String
  content_contains?: String
  content_not_contains?: String
  content_starts_with?: String
  content_not_starts_with?: String
  content_ends_with?: String
  content_not_ends_with?: String
  directParentType?: CONTENT_TYPE
  directParentType_not?: CONTENT_TYPE
  directParentType_in?: CONTENT_TYPE[] | CONTENT_TYPE
  directParentType_not_in?: CONTENT_TYPE[] | CONTENT_TYPE
  author?: UserWhereInput
  post?: PostWhereInput
  votes_every?: VoteWhereInput
  votes_some?: VoteWhereInput
  votes_none?: VoteWhereInput
  flags_every?: FlagWhereInput
  flags_some?: FlagWhereInput
  flags_none?: FlagWhereInput
}

export interface PostCreateInput {
  title: String
  url?: String
  content?: String
  hidden?: Boolean
  mediaLink?: String
  isAdmin?: Boolean
  author: UserCreateOneWithoutPostsInput
  comments?: CommentCreateManyWithoutPostInput
  flags?: FlagCreateManyWithoutPostInput
  votes?: VoteCreateManyWithoutPostInput
}

export interface PostWhereInput {
  AND?: PostWhereInput[] | PostWhereInput
  OR?: PostWhereInput[] | PostWhereInput
  id?: ID_Input
  id_not?: ID_Input
  id_in?: ID_Input[] | ID_Input
  id_not_in?: ID_Input[] | ID_Input
  id_lt?: ID_Input
  id_lte?: ID_Input
  id_gt?: ID_Input
  id_gte?: ID_Input
  id_contains?: ID_Input
  id_not_contains?: ID_Input
  id_starts_with?: ID_Input
  id_not_starts_with?: ID_Input
  id_ends_with?: ID_Input
  id_not_ends_with?: ID_Input
  createdAt?: DateTime
  createdAt_not?: DateTime
  createdAt_in?: DateTime[] | DateTime
  createdAt_not_in?: DateTime[] | DateTime
  createdAt_lt?: DateTime
  createdAt_lte?: DateTime
  createdAt_gt?: DateTime
  createdAt_gte?: DateTime
  updatedAt?: DateTime
  updatedAt_not?: DateTime
  updatedAt_in?: DateTime[] | DateTime
  updatedAt_not_in?: DateTime[] | DateTime
  updatedAt_lt?: DateTime
  updatedAt_lte?: DateTime
  updatedAt_gt?: DateTime
  updatedAt_gte?: DateTime
  title?: String
  title_not?: String
  title_in?: String[] | String
  title_not_in?: String[] | String
  title_lt?: String
  title_lte?: String
  title_gt?: String
  title_gte?: String
  title_contains?: String
  title_not_contains?: String
  title_starts_with?: String
  title_not_starts_with?: String
  title_ends_with?: String
  title_not_ends_with?: String
  url?: String
  url_not?: String
  url_in?: String[] | String
  url_not_in?: String[] | String
  url_lt?: String
  url_lte?: String
  url_gt?: String
  url_gte?: String
  url_contains?: String
  url_not_contains?: String
  url_starts_with?: String
  url_not_starts_with?: String
  url_ends_with?: String
  url_not_ends_with?: String
  content?: String
  content_not?: String
  content_in?: String[] | String
  content_not_in?: String[] | String
  content_lt?: String
  content_lte?: String
  content_gt?: String
  content_gte?: String
  content_contains?: String
  content_not_contains?: String
  content_starts_with?: String
  content_not_starts_with?: String
  content_ends_with?: String
  content_not_ends_with?: String
  hidden?: Boolean
  hidden_not?: Boolean
  mediaLink?: String
  mediaLink_not?: String
  mediaLink_in?: String[] | String
  mediaLink_not_in?: String[] | String
  mediaLink_lt?: String
  mediaLink_lte?: String
  mediaLink_gt?: String
  mediaLink_gte?: String
  mediaLink_contains?: String
  mediaLink_not_contains?: String
  mediaLink_starts_with?: String
  mediaLink_not_starts_with?: String
  mediaLink_ends_with?: String
  mediaLink_not_ends_with?: String
  isAdmin?: Boolean
  isAdmin_not?: Boolean
  author?: UserWhereInput
  comments_every?: CommentWhereInput
  comments_some?: CommentWhereInput
  comments_none?: CommentWhereInput
  flags_every?: FlagWhereInput
  flags_some?: FlagWhereInput
  flags_none?: FlagWhereInput
  votes_every?: VoteWhereInput
  votes_some?: VoteWhereInput
  votes_none?: VoteWhereInput
}

export interface VoteCreateInput {
  score: Int
  contentType: CONTENT_TYPE
  comment?: CommentCreateOneWithoutVotesInput
  post: PostCreateOneWithoutVotesInput
}

export interface PostSubscriptionWhereInput {
  AND?: PostSubscriptionWhereInput[] | PostSubscriptionWhereInput
  OR?: PostSubscriptionWhereInput[] | PostSubscriptionWhereInput
  mutation_in?: MutationType[] | MutationType
  updatedFields_contains?: String
  updatedFields_contains_every?: String[] | String
  updatedFields_contains_some?: String[] | String
  node?: PostWhereInput
}

export interface CommentCreateInput {
  content: String
  directParentType: CONTENT_TYPE
  author: UserCreateOneWithoutCommentsInput
  post: PostCreateOneWithoutCommentsInput
  votes?: VoteCreateManyWithoutCommentInput
  flags?: FlagCreateManyWithoutCommentInput
}

export interface FlagUpdateInput {
  reportedContentType?: CONTENT_TYPE
  creator?: UserUpdateOneWithoutFlagsReportedAboutOthersInput
  reportedUser?: UserUpdateOneWithoutFlagsReportedAboutThisUserInput
  comment?: CommentUpdateOneWithoutFlagsInput
  post?: PostUpdateOneWithoutFlagsInput
}

export interface FlagCreateInput {
  reportedContentType: CONTENT_TYPE
  creator: UserCreateOneWithoutFlagsReportedAboutOthersInput
  reportedUser: UserCreateOneWithoutFlagsReportedAboutThisUserInput
  comment?: CommentCreateOneWithoutFlagsInput
  post: PostCreateOneWithoutFlagsInput
}

export interface UserWhereUniqueInput {
  id?: ID_Input
  facebookUserId?: String
  username?: String
}

export interface UserUpdateInput {
  facebookUserId?: String
  facebookEmail?: String
  email?: String
  username?: String
  password?: String
  name?: String
  admin?: Boolean
  about?: String
  userType?: USER_TYPE
  posts?: PostUpdateManyWithoutAuthorInput
  comments?: CommentUpdateManyWithoutAuthorInput
  flagsReportedAboutOthers?: FlagUpdateManyWithoutCreatorInput
  flagsReportedAboutThisUser?: FlagUpdateManyWithoutReportedUserInput
}

export interface VoteWhereUniqueInput {
  id?: ID_Input
}

export interface PostUpdateManyWithoutAuthorInput {
  create?: PostCreateWithoutAuthorInput[] | PostCreateWithoutAuthorInput
  connect?: PostWhereUniqueInput[] | PostWhereUniqueInput
  disconnect?: PostWhereUniqueInput[] | PostWhereUniqueInput
  delete?: PostWhereUniqueInput[] | PostWhereUniqueInput
  update?: PostUpdateWithoutAuthorInput[] | PostUpdateWithoutAuthorInput
  upsert?: PostUpsertWithoutAuthorInput[] | PostUpsertWithoutAuthorInput
}

export interface FlagWhereUniqueInput {
  id?: ID_Input
}

export interface PostUpdateWithoutAuthorInput {
  where: PostWhereUniqueInput
  data: PostUpdateWithoutAuthorDataInput
}

export interface PostUpdateInput {
  title?: String
  url?: String
  content?: String
  hidden?: Boolean
  mediaLink?: String
  isAdmin?: Boolean
  author?: UserUpdateOneWithoutPostsInput
  comments?: CommentUpdateManyWithoutPostInput
  flags?: FlagUpdateManyWithoutPostInput
  votes?: VoteUpdateManyWithoutPostInput
}

export interface PostUpdateWithoutAuthorDataInput {
  title?: String
  url?: String
  content?: String
  hidden?: Boolean
  mediaLink?: String
  isAdmin?: Boolean
  comments?: CommentUpdateManyWithoutPostInput
  flags?: FlagUpdateManyWithoutPostInput
  votes?: VoteUpdateManyWithoutPostInput
}

export interface CommentUpsertWithoutPostInput {
  where: CommentWhereUniqueInput
  update: CommentUpdateWithoutPostDataInput
  create: CommentCreateWithoutPostInput
}

export interface CommentUpdateManyWithoutPostInput {
  create?: CommentCreateWithoutPostInput[] | CommentCreateWithoutPostInput
  connect?: CommentWhereUniqueInput[] | CommentWhereUniqueInput
  disconnect?: CommentWhereUniqueInput[] | CommentWhereUniqueInput
  delete?: CommentWhereUniqueInput[] | CommentWhereUniqueInput
  update?: CommentUpdateWithoutPostInput[] | CommentUpdateWithoutPostInput
  upsert?: CommentUpsertWithoutPostInput[] | CommentUpsertWithoutPostInput
}

export interface FlagUpsertWithoutCreatorInput {
  where: FlagWhereUniqueInput
  update: FlagUpdateWithoutCreatorDataInput
  create: FlagCreateWithoutCreatorInput
}

export interface FlagUpdateWithoutCommentInput {
  where: FlagWhereUniqueInput
  data: FlagUpdateWithoutCommentDataInput
}

export interface CommentUpsertWithoutAuthorInput {
  where: CommentWhereUniqueInput
  update: CommentUpdateWithoutAuthorDataInput
  create: CommentCreateWithoutAuthorInput
}

export interface CommentUpdateWithoutPostDataInput {
  content?: String
  directParentType?: CONTENT_TYPE
  author?: UserUpdateOneWithoutCommentsInput
  votes?: VoteUpdateManyWithoutCommentInput
  flags?: FlagUpdateManyWithoutCommentInput
}

export interface UserUpsertWithoutPostsInput {
  where: UserWhereUniqueInput
  update: UserUpdateWithoutPostsDataInput
  create: UserCreateWithoutPostsInput
}

export interface UserUpdateOneWithoutCommentsInput {
  create?: UserCreateWithoutCommentsInput
  connect?: UserWhereUniqueInput
  disconnect?: UserWhereUniqueInput
  delete?: UserWhereUniqueInput
  update?: UserUpdateWithoutCommentsInput
  upsert?: UserUpsertWithoutCommentsInput
}

export interface PostUpsertWithoutFlagsInput {
  where: PostWhereUniqueInput
  update: PostUpdateWithoutFlagsDataInput
  create: PostCreateWithoutFlagsInput
}

export interface UserUpdateWithoutCommentsInput {
  where: UserWhereUniqueInput
  data: UserUpdateWithoutCommentsDataInput
}

export interface CommentUpsertWithoutVotesInput {
  where: CommentWhereUniqueInput
  update: CommentUpdateWithoutVotesDataInput
  create: CommentCreateWithoutVotesInput
}

export interface UserUpdateWithoutCommentsDataInput {
  facebookUserId?: String
  facebookEmail?: String
  email?: String
  username?: String
  password?: String
  name?: String
  admin?: Boolean
  about?: String
  userType?: USER_TYPE
  posts?: PostUpdateManyWithoutAuthorInput
  flagsReportedAboutOthers?: FlagUpdateManyWithoutCreatorInput
  flagsReportedAboutThisUser?: FlagUpdateManyWithoutReportedUserInput
}

export interface FlagUpdateWithoutCommentDataInput {
  reportedContentType?: CONTENT_TYPE
  creator?: UserUpdateOneWithoutFlagsReportedAboutOthersInput
  reportedUser?: UserUpdateOneWithoutFlagsReportedAboutThisUserInput
  post?: PostUpdateOneWithoutFlagsInput
}

export interface FlagWhereInput {
  AND?: FlagWhereInput[] | FlagWhereInput
  OR?: FlagWhereInput[] | FlagWhereInput
  id?: ID_Input
  id_not?: ID_Input
  id_in?: ID_Input[] | ID_Input
  id_not_in?: ID_Input[] | ID_Input
  id_lt?: ID_Input
  id_lte?: ID_Input
  id_gt?: ID_Input
  id_gte?: ID_Input
  id_contains?: ID_Input
  id_not_contains?: ID_Input
  id_starts_with?: ID_Input
  id_not_starts_with?: ID_Input
  id_ends_with?: ID_Input
  id_not_ends_with?: ID_Input
  createdAt?: DateTime
  createdAt_not?: DateTime
  createdAt_in?: DateTime[] | DateTime
  createdAt_not_in?: DateTime[] | DateTime
  createdAt_lt?: DateTime
  createdAt_lte?: DateTime
  createdAt_gt?: DateTime
  createdAt_gte?: DateTime
  updatedAt?: DateTime
  updatedAt_not?: DateTime
  updatedAt_in?: DateTime[] | DateTime
  updatedAt_not_in?: DateTime[] | DateTime
  updatedAt_lt?: DateTime
  updatedAt_lte?: DateTime
  updatedAt_gt?: DateTime
  updatedAt_gte?: DateTime
  reportedContentType?: CONTENT_TYPE
  reportedContentType_not?: CONTENT_TYPE
  reportedContentType_in?: CONTENT_TYPE[] | CONTENT_TYPE
  reportedContentType_not_in?: CONTENT_TYPE[] | CONTENT_TYPE
  creator?: UserWhereInput
  reportedUser?: UserWhereInput
  comment?: CommentWhereInput
  post?: PostWhereInput
}

export interface PostCreateManyWithoutAuthorInput {
  create?: PostCreateWithoutAuthorInput[] | PostCreateWithoutAuthorInput
  connect?: PostWhereUniqueInput[] | PostWhereUniqueInput
}

export interface FlagUpdateWithoutCreatorInput {
  where: FlagWhereUniqueInput
  data: FlagUpdateWithoutCreatorDataInput
}

export interface CommentCreateManyWithoutPostInput {
  create?: CommentCreateWithoutPostInput[] | CommentCreateWithoutPostInput
  connect?: CommentWhereUniqueInput[] | CommentWhereUniqueInput
}

export interface FlagUpdateWithoutCreatorDataInput {
  reportedContentType?: CONTENT_TYPE
  reportedUser?: UserUpdateOneWithoutFlagsReportedAboutThisUserInput
  comment?: CommentUpdateOneWithoutFlagsInput
  post?: PostUpdateOneWithoutFlagsInput
}

export interface UserCreateOneWithoutCommentsInput {
  create?: UserCreateWithoutCommentsInput
  connect?: UserWhereUniqueInput
}

export interface UserUpdateOneWithoutFlagsReportedAboutThisUserInput {
  create?: UserCreateWithoutFlagsReportedAboutThisUserInput
  connect?: UserWhereUniqueInput
  disconnect?: UserWhereUniqueInput
  delete?: UserWhereUniqueInput
  update?: UserUpdateWithoutFlagsReportedAboutThisUserInput
  upsert?: UserUpsertWithoutFlagsReportedAboutThisUserInput
}

export interface FlagCreateManyWithoutCreatorInput {
  create?: FlagCreateWithoutCreatorInput[] | FlagCreateWithoutCreatorInput
  connect?: FlagWhereUniqueInput[] | FlagWhereUniqueInput
}

export interface UserUpdateWithoutFlagsReportedAboutThisUserInput {
  where: UserWhereUniqueInput
  data: UserUpdateWithoutFlagsReportedAboutThisUserDataInput
}

export interface UserCreateOneWithoutFlagsReportedAboutThisUserInput {
  create?: UserCreateWithoutFlagsReportedAboutThisUserInput
  connect?: UserWhereUniqueInput
}

export interface UserUpdateWithoutFlagsReportedAboutThisUserDataInput {
  facebookUserId?: String
  facebookEmail?: String
  email?: String
  username?: String
  password?: String
  name?: String
  admin?: Boolean
  about?: String
  userType?: USER_TYPE
  posts?: PostUpdateManyWithoutAuthorInput
  comments?: CommentUpdateManyWithoutAuthorInput
  flagsReportedAboutOthers?: FlagUpdateManyWithoutCreatorInput
}

export interface CommentCreateManyWithoutAuthorInput {
  create?: CommentCreateWithoutAuthorInput[] | CommentCreateWithoutAuthorInput
  connect?: CommentWhereUniqueInput[] | CommentWhereUniqueInput
}

export interface CommentUpdateManyWithoutAuthorInput {
  create?: CommentCreateWithoutAuthorInput[] | CommentCreateWithoutAuthorInput
  connect?: CommentWhereUniqueInput[] | CommentWhereUniqueInput
  disconnect?: CommentWhereUniqueInput[] | CommentWhereUniqueInput
  delete?: CommentWhereUniqueInput[] | CommentWhereUniqueInput
  update?: CommentUpdateWithoutAuthorInput[] | CommentUpdateWithoutAuthorInput
  upsert?: CommentUpsertWithoutAuthorInput[] | CommentUpsertWithoutAuthorInput
}

export interface PostCreateOneWithoutCommentsInput {
  create?: PostCreateWithoutCommentsInput
  connect?: PostWhereUniqueInput
}

export interface CommentUpdateWithoutAuthorInput {
  where: CommentWhereUniqueInput
  data: CommentUpdateWithoutAuthorDataInput
}

export interface UserCreateOneWithoutPostsInput {
  create?: UserCreateWithoutPostsInput
  connect?: UserWhereUniqueInput
}

export interface CommentUpdateWithoutAuthorDataInput {
  content?: String
  directParentType?: CONTENT_TYPE
  post?: PostUpdateOneWithoutCommentsInput
  votes?: VoteUpdateManyWithoutCommentInput
  flags?: FlagUpdateManyWithoutCommentInput
}

export interface FlagCreateManyWithoutReportedUserInput {
  create?: FlagCreateWithoutReportedUserInput[] | FlagCreateWithoutReportedUserInput
  connect?: FlagWhereUniqueInput[] | FlagWhereUniqueInput
}

export interface PostUpdateOneWithoutCommentsInput {
  create?: PostCreateWithoutCommentsInput
  connect?: PostWhereUniqueInput
  disconnect?: PostWhereUniqueInput
  delete?: PostWhereUniqueInput
  update?: PostUpdateWithoutCommentsInput
  upsert?: PostUpsertWithoutCommentsInput
}

export interface UserCreateOneWithoutFlagsReportedAboutOthersInput {
  create?: UserCreateWithoutFlagsReportedAboutOthersInput
  connect?: UserWhereUniqueInput
}

export interface PostUpdateWithoutCommentsInput {
  where: PostWhereUniqueInput
  data: PostUpdateWithoutCommentsDataInput
}

export interface CommentCreateOneWithoutFlagsInput {
  create?: CommentCreateWithoutFlagsInput
  connect?: CommentWhereUniqueInput
}

export interface PostUpdateWithoutCommentsDataInput {
  title?: String
  url?: String
  content?: String
  hidden?: Boolean
  mediaLink?: String
  isAdmin?: Boolean
  author?: UserUpdateOneWithoutPostsInput
  flags?: FlagUpdateManyWithoutPostInput
  votes?: VoteUpdateManyWithoutPostInput
}

export interface VoteCreateManyWithoutCommentInput {
  create?: VoteCreateWithoutCommentInput[] | VoteCreateWithoutCommentInput
  connect?: VoteWhereUniqueInput[] | VoteWhereUniqueInput
}

export interface UserUpdateOneWithoutPostsInput {
  create?: UserCreateWithoutPostsInput
  connect?: UserWhereUniqueInput
  disconnect?: UserWhereUniqueInput
  delete?: UserWhereUniqueInput
  update?: UserUpdateWithoutPostsInput
  upsert?: UserUpsertWithoutPostsInput
}

export interface PostCreateOneWithoutVotesInput {
  create?: PostCreateWithoutVotesInput
  connect?: PostWhereUniqueInput
}

export interface UserUpdateWithoutPostsInput {
  where: UserWhereUniqueInput
  data: UserUpdateWithoutPostsDataInput
}

export interface FlagCreateManyWithoutPostInput {
  create?: FlagCreateWithoutPostInput[] | FlagCreateWithoutPostInput
  connect?: FlagWhereUniqueInput[] | FlagWhereUniqueInput
}

export interface UserUpdateWithoutPostsDataInput {
  facebookUserId?: String
  facebookEmail?: String
  email?: String
  username?: String
  password?: String
  name?: String
  admin?: Boolean
  about?: String
  userType?: USER_TYPE
  comments?: CommentUpdateManyWithoutAuthorInput
  flagsReportedAboutOthers?: FlagUpdateManyWithoutCreatorInput
  flagsReportedAboutThisUser?: FlagUpdateManyWithoutReportedUserInput
}

export interface PostCreateOneWithoutFlagsInput {
  create?: PostCreateWithoutFlagsInput
  connect?: PostWhereUniqueInput
}

export interface FlagUpdateManyWithoutReportedUserInput {
  create?: FlagCreateWithoutReportedUserInput[] | FlagCreateWithoutReportedUserInput
  connect?: FlagWhereUniqueInput[] | FlagWhereUniqueInput
  disconnect?: FlagWhereUniqueInput[] | FlagWhereUniqueInput
  delete?: FlagWhereUniqueInput[] | FlagWhereUniqueInput
  update?: FlagUpdateWithoutReportedUserInput[] | FlagUpdateWithoutReportedUserInput
  upsert?: FlagUpsertWithoutReportedUserInput[] | FlagUpsertWithoutReportedUserInput
}

export interface VoteCreateManyWithoutPostInput {
  create?: VoteCreateWithoutPostInput[] | VoteCreateWithoutPostInput
  connect?: VoteWhereUniqueInput[] | VoteWhereUniqueInput
}

export interface FlagUpdateWithoutReportedUserInput {
  where: FlagWhereUniqueInput
  data: FlagUpdateWithoutReportedUserDataInput
}

export interface VoteWhereInput {
  AND?: VoteWhereInput[] | VoteWhereInput
  OR?: VoteWhereInput[] | VoteWhereInput
  id?: ID_Input
  id_not?: ID_Input
  id_in?: ID_Input[] | ID_Input
  id_not_in?: ID_Input[] | ID_Input
  id_lt?: ID_Input
  id_lte?: ID_Input
  id_gt?: ID_Input
  id_gte?: ID_Input
  id_contains?: ID_Input
  id_not_contains?: ID_Input
  id_starts_with?: ID_Input
  id_not_starts_with?: ID_Input
  id_ends_with?: ID_Input
  id_not_ends_with?: ID_Input
  createdAt?: DateTime
  createdAt_not?: DateTime
  createdAt_in?: DateTime[] | DateTime
  createdAt_not_in?: DateTime[] | DateTime
  createdAt_lt?: DateTime
  createdAt_lte?: DateTime
  createdAt_gt?: DateTime
  createdAt_gte?: DateTime
  updatedAt?: DateTime
  updatedAt_not?: DateTime
  updatedAt_in?: DateTime[] | DateTime
  updatedAt_not_in?: DateTime[] | DateTime
  updatedAt_lt?: DateTime
  updatedAt_lte?: DateTime
  updatedAt_gt?: DateTime
  updatedAt_gte?: DateTime
  score?: Int
  score_not?: Int
  score_in?: Int[] | Int
  score_not_in?: Int[] | Int
  score_lt?: Int
  score_lte?: Int
  score_gt?: Int
  score_gte?: Int
  contentType?: CONTENT_TYPE
  contentType_not?: CONTENT_TYPE
  contentType_in?: CONTENT_TYPE[] | CONTENT_TYPE
  contentType_not_in?: CONTENT_TYPE[] | CONTENT_TYPE
  comment?: CommentWhereInput
  post?: PostWhereInput
}

export interface FlagUpdateWithoutReportedUserDataInput {
  reportedContentType?: CONTENT_TYPE
  creator?: UserUpdateOneWithoutFlagsReportedAboutOthersInput
  comment?: CommentUpdateOneWithoutFlagsInput
  post?: PostUpdateOneWithoutFlagsInput
}

export interface CommentSubscriptionWhereInput {
  AND?: CommentSubscriptionWhereInput[] | CommentSubscriptionWhereInput
  OR?: CommentSubscriptionWhereInput[] | CommentSubscriptionWhereInput
  mutation_in?: MutationType[] | MutationType
  updatedFields_contains?: String
  updatedFields_contains_every?: String[] | String
  updatedFields_contains_some?: String[] | String
  node?: CommentWhereInput
}

export interface UserUpdateOneWithoutFlagsReportedAboutOthersInput {
  create?: UserCreateWithoutFlagsReportedAboutOthersInput
  connect?: UserWhereUniqueInput
  disconnect?: UserWhereUniqueInput
  delete?: UserWhereUniqueInput
  update?: UserUpdateWithoutFlagsReportedAboutOthersInput
  upsert?: UserUpsertWithoutFlagsReportedAboutOthersInput
}

export interface UserSubscriptionWhereInput {
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput
  mutation_in?: MutationType[] | MutationType
  updatedFields_contains?: String
  updatedFields_contains_every?: String[] | String
  updatedFields_contains_some?: String[] | String
  node?: UserWhereInput
}

export interface UserUpdateWithoutFlagsReportedAboutOthersInput {
  where: UserWhereUniqueInput
  data: UserUpdateWithoutFlagsReportedAboutOthersDataInput
}

export interface PostWhereUniqueInput {
  id?: ID_Input
}

export interface UserUpdateWithoutFlagsReportedAboutOthersDataInput {
  facebookUserId?: String
  facebookEmail?: String
  email?: String
  username?: String
  password?: String
  name?: String
  admin?: Boolean
  about?: String
  userType?: USER_TYPE
  posts?: PostUpdateManyWithoutAuthorInput
  comments?: CommentUpdateManyWithoutAuthorInput
  flagsReportedAboutThisUser?: FlagUpdateManyWithoutReportedUserInput
}

export interface VoteUpdateInput {
  score?: Int
  contentType?: CONTENT_TYPE
  comment?: CommentUpdateOneWithoutVotesInput
  post?: PostUpdateOneWithoutVotesInput
}

export interface UserUpsertWithoutFlagsReportedAboutOthersInput {
  where: UserWhereUniqueInput
  update: UserUpdateWithoutFlagsReportedAboutOthersDataInput
  create: UserCreateWithoutFlagsReportedAboutOthersInput
}

export interface UserUpsertWithoutCommentsInput {
  where: UserWhereUniqueInput
  update: UserUpdateWithoutCommentsDataInput
  create: UserCreateWithoutCommentsInput
}

export interface CommentUpdateOneWithoutFlagsInput {
  create?: CommentCreateWithoutFlagsInput
  connect?: CommentWhereUniqueInput
  disconnect?: CommentWhereUniqueInput
  delete?: CommentWhereUniqueInput
  update?: CommentUpdateWithoutFlagsInput
  upsert?: CommentUpsertWithoutFlagsInput
}

export interface PostUpsertWithoutCommentsInput {
  where: PostWhereUniqueInput
  update: PostUpdateWithoutCommentsDataInput
  create: PostCreateWithoutCommentsInput
}

export interface CommentUpdateWithoutFlagsInput {
  where: CommentWhereUniqueInput
  data: CommentUpdateWithoutFlagsDataInput
}

export interface VoteUpsertWithoutPostInput {
  where: VoteWhereUniqueInput
  update: VoteUpdateWithoutPostDataInput
  create: VoteCreateWithoutPostInput
}

export interface CommentUpdateWithoutFlagsDataInput {
  content?: String
  directParentType?: CONTENT_TYPE
  author?: UserUpdateOneWithoutCommentsInput
  post?: PostUpdateOneWithoutCommentsInput
  votes?: VoteUpdateManyWithoutCommentInput
}

export interface UserCreateInput {
  facebookUserId?: String
  facebookEmail?: String
  email?: String
  username?: String
  password?: String
  name?: String
  admin?: Boolean
  about?: String
  userType?: USER_TYPE
  posts?: PostCreateManyWithoutAuthorInput
  comments?: CommentCreateManyWithoutAuthorInput
  flagsReportedAboutOthers?: FlagCreateManyWithoutCreatorInput
  flagsReportedAboutThisUser?: FlagCreateManyWithoutReportedUserInput
}

export interface VoteUpdateManyWithoutCommentInput {
  create?: VoteCreateWithoutCommentInput[] | VoteCreateWithoutCommentInput
  connect?: VoteWhereUniqueInput[] | VoteWhereUniqueInput
  disconnect?: VoteWhereUniqueInput[] | VoteWhereUniqueInput
  delete?: VoteWhereUniqueInput[] | VoteWhereUniqueInput
  update?: VoteUpdateWithoutCommentInput[] | VoteUpdateWithoutCommentInput
  upsert?: VoteUpsertWithoutCommentInput[] | VoteUpsertWithoutCommentInput
}

export interface CommentCreateWithoutPostInput {
  content: String
  directParentType: CONTENT_TYPE
  author: UserCreateOneWithoutCommentsInput
  votes?: VoteCreateManyWithoutCommentInput
  flags?: FlagCreateManyWithoutCommentInput
}

export interface VoteUpdateWithoutCommentInput {
  where: VoteWhereUniqueInput
  data: VoteUpdateWithoutCommentDataInput
}

export interface FlagCreateWithoutCreatorInput {
  reportedContentType: CONTENT_TYPE
  reportedUser: UserCreateOneWithoutFlagsReportedAboutThisUserInput
  comment?: CommentCreateOneWithoutFlagsInput
  post: PostCreateOneWithoutFlagsInput
}

export interface VoteUpdateWithoutCommentDataInput {
  score?: Int
  contentType?: CONTENT_TYPE
  post?: PostUpdateOneWithoutVotesInput
}

export interface CommentCreateWithoutAuthorInput {
  content: String
  directParentType: CONTENT_TYPE
  post: PostCreateOneWithoutCommentsInput
  votes?: VoteCreateManyWithoutCommentInput
  flags?: FlagCreateManyWithoutCommentInput
}

export interface PostUpdateOneWithoutVotesInput {
  create?: PostCreateWithoutVotesInput
  connect?: PostWhereUniqueInput
  disconnect?: PostWhereUniqueInput
  delete?: PostWhereUniqueInput
  update?: PostUpdateWithoutVotesInput
  upsert?: PostUpsertWithoutVotesInput
}

export interface UserCreateWithoutPostsInput {
  facebookUserId?: String
  facebookEmail?: String
  email?: String
  username?: String
  password?: String
  name?: String
  admin?: Boolean
  about?: String
  userType?: USER_TYPE
  comments?: CommentCreateManyWithoutAuthorInput
  flagsReportedAboutOthers?: FlagCreateManyWithoutCreatorInput
  flagsReportedAboutThisUser?: FlagCreateManyWithoutReportedUserInput
}

export interface PostUpdateWithoutVotesInput {
  where: PostWhereUniqueInput
  data: PostUpdateWithoutVotesDataInput
}

export interface UserCreateWithoutFlagsReportedAboutOthersInput {
  facebookUserId?: String
  facebookEmail?: String
  email?: String
  username?: String
  password?: String
  name?: String
  admin?: Boolean
  about?: String
  userType?: USER_TYPE
  posts?: PostCreateManyWithoutAuthorInput
  comments?: CommentCreateManyWithoutAuthorInput
  flagsReportedAboutThisUser?: FlagCreateManyWithoutReportedUserInput
}

export interface PostUpdateWithoutVotesDataInput {
  title?: String
  url?: String
  content?: String
  hidden?: Boolean
  mediaLink?: String
  isAdmin?: Boolean
  author?: UserUpdateOneWithoutPostsInput
  comments?: CommentUpdateManyWithoutPostInput
  flags?: FlagUpdateManyWithoutPostInput
}

export interface VoteCreateWithoutCommentInput {
  score: Int
  contentType: CONTENT_TYPE
  post: PostCreateOneWithoutVotesInput
}

export interface FlagUpdateManyWithoutPostInput {
  create?: FlagCreateWithoutPostInput[] | FlagCreateWithoutPostInput
  connect?: FlagWhereUniqueInput[] | FlagWhereUniqueInput
  disconnect?: FlagWhereUniqueInput[] | FlagWhereUniqueInput
  delete?: FlagWhereUniqueInput[] | FlagWhereUniqueInput
  update?: FlagUpdateWithoutPostInput[] | FlagUpdateWithoutPostInput
  upsert?: FlagUpsertWithoutPostInput[] | FlagUpsertWithoutPostInput
}

export interface FlagCreateWithoutPostInput {
  reportedContentType: CONTENT_TYPE
  creator: UserCreateOneWithoutFlagsReportedAboutOthersInput
  reportedUser: UserCreateOneWithoutFlagsReportedAboutThisUserInput
  comment?: CommentCreateOneWithoutFlagsInput
}

export interface FlagUpdateWithoutPostInput {
  where: FlagWhereUniqueInput
  data: FlagUpdateWithoutPostDataInput
}

export interface VoteCreateWithoutPostInput {
  score: Int
  contentType: CONTENT_TYPE
  comment?: CommentCreateOneWithoutVotesInput
}

export interface FlagUpdateWithoutPostDataInput {
  reportedContentType?: CONTENT_TYPE
  creator?: UserUpdateOneWithoutFlagsReportedAboutOthersInput
  reportedUser?: UserUpdateOneWithoutFlagsReportedAboutThisUserInput
  comment?: CommentUpdateOneWithoutFlagsInput
}

export interface VoteSubscriptionWhereInput {
  AND?: VoteSubscriptionWhereInput[] | VoteSubscriptionWhereInput
  OR?: VoteSubscriptionWhereInput[] | VoteSubscriptionWhereInput
  mutation_in?: MutationType[] | MutationType
  updatedFields_contains?: String
  updatedFields_contains_every?: String[] | String
  updatedFields_contains_some?: String[] | String
  node?: VoteWhereInput
}

export interface FlagUpsertWithoutPostInput {
  where: FlagWhereUniqueInput
  update: FlagUpdateWithoutPostDataInput
  create: FlagCreateWithoutPostInput
}

export interface CommentWhereUniqueInput {
  id?: ID_Input
}

export interface PostUpsertWithoutVotesInput {
  where: PostWhereUniqueInput
  update: PostUpdateWithoutVotesDataInput
  create: PostCreateWithoutVotesInput
}

export interface UserUpsertWithoutFlagsReportedAboutThisUserInput {
  where: UserWhereUniqueInput
  update: UserUpdateWithoutFlagsReportedAboutThisUserDataInput
  create: UserCreateWithoutFlagsReportedAboutThisUserInput
}

export interface VoteUpsertWithoutCommentInput {
  where: VoteWhereUniqueInput
  update: VoteUpdateWithoutCommentDataInput
  create: VoteCreateWithoutCommentInput
}

export interface FlagUpsertWithoutCommentInput {
  where: FlagWhereUniqueInput
  update: FlagUpdateWithoutCommentDataInput
  create: FlagCreateWithoutCommentInput
}

export interface CommentUpsertWithoutFlagsInput {
  where: CommentWhereUniqueInput
  update: CommentUpdateWithoutFlagsDataInput
  create: CommentCreateWithoutFlagsInput
}

export interface UserCreateWithoutCommentsInput {
  facebookUserId?: String
  facebookEmail?: String
  email?: String
  username?: String
  password?: String
  name?: String
  admin?: Boolean
  about?: String
  userType?: USER_TYPE
  posts?: PostCreateManyWithoutAuthorInput
  flagsReportedAboutOthers?: FlagCreateManyWithoutCreatorInput
  flagsReportedAboutThisUser?: FlagCreateManyWithoutReportedUserInput
}

export interface PostUpdateOneWithoutFlagsInput {
  create?: PostCreateWithoutFlagsInput
  connect?: PostWhereUniqueInput
  disconnect?: PostWhereUniqueInput
  delete?: PostWhereUniqueInput
  update?: PostUpdateWithoutFlagsInput
  upsert?: PostUpsertWithoutFlagsInput
}

export interface PostCreateWithoutCommentsInput {
  title: String
  url?: String
  content?: String
  hidden?: Boolean
  mediaLink?: String
  isAdmin?: Boolean
  author: UserCreateOneWithoutPostsInput
  flags?: FlagCreateManyWithoutPostInput
  votes?: VoteCreateManyWithoutPostInput
}

export interface PostUpdateWithoutFlagsInput {
  where: PostWhereUniqueInput
  data: PostUpdateWithoutFlagsDataInput
}

export interface CommentCreateWithoutFlagsInput {
  content: String
  directParentType: CONTENT_TYPE
  author: UserCreateOneWithoutCommentsInput
  post: PostCreateOneWithoutCommentsInput
  votes?: VoteCreateManyWithoutCommentInput
}

export interface PostUpdateWithoutFlagsDataInput {
  title?: String
  url?: String
  content?: String
  hidden?: Boolean
  mediaLink?: String
  isAdmin?: Boolean
  author?: UserUpdateOneWithoutPostsInput
  comments?: CommentUpdateManyWithoutPostInput
  votes?: VoteUpdateManyWithoutPostInput
}

export interface PostCreateWithoutFlagsInput {
  title: String
  url?: String
  content?: String
  hidden?: Boolean
  mediaLink?: String
  isAdmin?: Boolean
  author: UserCreateOneWithoutPostsInput
  comments?: CommentCreateManyWithoutPostInput
  votes?: VoteCreateManyWithoutPostInput
}

export interface VoteUpdateManyWithoutPostInput {
  create?: VoteCreateWithoutPostInput[] | VoteCreateWithoutPostInput
  connect?: VoteWhereUniqueInput[] | VoteWhereUniqueInput
  disconnect?: VoteWhereUniqueInput[] | VoteWhereUniqueInput
  delete?: VoteWhereUniqueInput[] | VoteWhereUniqueInput
  update?: VoteUpdateWithoutPostInput[] | VoteUpdateWithoutPostInput
  upsert?: VoteUpsertWithoutPostInput[] | VoteUpsertWithoutPostInput
}

export interface CommentUpdateInput {
  content?: String
  directParentType?: CONTENT_TYPE
  author?: UserUpdateOneWithoutCommentsInput
  post?: PostUpdateOneWithoutCommentsInput
  votes?: VoteUpdateManyWithoutCommentInput
  flags?: FlagUpdateManyWithoutCommentInput
}

export interface VoteUpdateWithoutPostInput {
  where: VoteWhereUniqueInput
  data: VoteUpdateWithoutPostDataInput
}

export interface FlagUpsertWithoutReportedUserInput {
  where: FlagWhereUniqueInput
  update: FlagUpdateWithoutReportedUserDataInput
  create: FlagCreateWithoutReportedUserInput
}

export interface UserCreateWithoutFlagsReportedAboutThisUserInput {
  facebookUserId?: String
  facebookEmail?: String
  email?: String
  username?: String
  password?: String
  name?: String
  admin?: Boolean
  about?: String
  userType?: USER_TYPE
  posts?: PostCreateManyWithoutAuthorInput
  comments?: CommentCreateManyWithoutAuthorInput
  flagsReportedAboutOthers?: FlagCreateManyWithoutCreatorInput
}

export interface CommentUpdateWithoutVotesDataInput {
  content?: String
  directParentType?: CONTENT_TYPE
  author?: UserUpdateOneWithoutCommentsInput
  post?: PostUpdateOneWithoutCommentsInput
  flags?: FlagUpdateManyWithoutCommentInput
}

export interface CommentUpdateWithoutVotesInput {
  where: CommentWhereUniqueInput
  data: CommentUpdateWithoutVotesDataInput
}

export interface CommentUpdateOneWithoutVotesInput {
  create?: CommentCreateWithoutVotesInput
  connect?: CommentWhereUniqueInput
  disconnect?: CommentWhereUniqueInput
  delete?: CommentWhereUniqueInput
  update?: CommentUpdateWithoutVotesInput
  upsert?: CommentUpsertWithoutVotesInput
}

export interface VoteUpdateWithoutPostDataInput {
  score?: Int
  contentType?: CONTENT_TYPE
  comment?: CommentUpdateOneWithoutVotesInput
}

export interface FlagCreateWithoutReportedUserInput {
  reportedContentType: CONTENT_TYPE
  creator: UserCreateOneWithoutFlagsReportedAboutOthersInput
  comment?: CommentCreateOneWithoutFlagsInput
  post: PostCreateOneWithoutFlagsInput
}

export interface PostCreateWithoutAuthorInput {
  title: String
  url?: String
  content?: String
  hidden?: Boolean
  mediaLink?: String
  isAdmin?: Boolean
  comments?: CommentCreateManyWithoutPostInput
  flags?: FlagCreateManyWithoutPostInput
  votes?: VoteCreateManyWithoutPostInput
}

export interface PostUpsertWithoutAuthorInput {
  where: PostWhereUniqueInput
  update: PostUpdateWithoutAuthorDataInput
  create: PostCreateWithoutAuthorInput
}

export interface PostCreateWithoutVotesInput {
  title: String
  url?: String
  content?: String
  hidden?: Boolean
  mediaLink?: String
  isAdmin?: Boolean
  author: UserCreateOneWithoutPostsInput
  comments?: CommentCreateManyWithoutPostInput
  flags?: FlagCreateManyWithoutPostInput
}

/*
 * An object with an ID

 */
export interface Node {
  id: ID_Output
}

export interface FlagPreviousValues {
  id: ID_Output
  createdAt: DateTime
  updatedAt: DateTime
  reportedContentType: CONTENT_TYPE
}

export interface Flag extends Node {
  id: ID_Output
  createdAt: DateTime
  updatedAt: DateTime
  reportedContentType: CONTENT_TYPE
  creator: User
  reportedUser: User
  comment?: Comment
  post: Post
}

export interface CommentSubscriptionPayload {
  mutation: MutationType
  node?: Comment
  updatedFields?: String[]
  previousValues?: CommentPreviousValues
}

export interface AggregateFlag {
  count: Int
}

/*
 * A connection to a list of items.

 */
export interface FlagConnection {
  pageInfo: PageInfo
  edges: FlagEdge[]
  aggregate: AggregateFlag
}

export interface BatchPayload {
  count: Long
}

/*
 * An edge in a connection.

 */
export interface CommentEdge {
  node: Comment
  cursor: String
}

export interface FlagSubscriptionPayload {
  mutation: MutationType
  node?: Flag
  updatedFields?: String[]
  previousValues?: FlagPreviousValues
}

export interface AggregateVote {
  count: Int
}

export interface Vote extends Node {
  id: ID_Output
  createdAt: DateTime
  updatedAt: DateTime
  score: Int
  contentType: CONTENT_TYPE
  comment?: Comment
  post: Post
}

/*
 * A connection to a list of items.

 */
export interface VoteConnection {
  pageInfo: PageInfo
  edges: VoteEdge[]
  aggregate: AggregateVote
}

export interface User extends Node {
  id: ID_Output
  facebookUserId?: String
  facebookEmail?: String
  createdAt: DateTime
  updatedAt: DateTime
  email?: String
  username?: String
  password?: String
  name?: String
  admin?: Boolean
  about?: String
  userType?: USER_TYPE
  posts?: Post[]
  comments?: Comment[]
  flagsReportedAboutOthers?: Flag[]
  flagsReportedAboutThisUser?: Flag[]
}

/*
 * An edge in a connection.

 */
export interface PostEdge {
  node: Post
  cursor: String
}

export interface UserSubscriptionPayload {
  mutation: MutationType
  node?: User
  updatedFields?: String[]
  previousValues?: UserPreviousValues
}

export interface AggregateUser {
  count: Int
}

export interface UserPreviousValues {
  id: ID_Output
  facebookUserId?: String
  facebookEmail?: String
  createdAt: DateTime
  updatedAt: DateTime
  email?: String
  username?: String
  password?: String
  name?: String
  admin?: Boolean
  about?: String
  userType?: USER_TYPE
}

/*
 * Information about pagination in a connection.

 */
export interface PageInfo {
  hasNextPage: Boolean
  hasPreviousPage: Boolean
  startCursor?: String
  endCursor?: String
}

export interface CommentPreviousValues {
  id: ID_Output
  createdAt: DateTime
  updatedAt: DateTime
  content: String
  directParentType: CONTENT_TYPE
}

/*
 * An edge in a connection.

 */
export interface FlagEdge {
  node: Flag
  cursor: String
}

export interface PostSubscriptionPayload {
  mutation: MutationType
  node?: Post
  updatedFields?: String[]
  previousValues?: PostPreviousValues
}

/*
 * A connection to a list of items.

 */
export interface CommentConnection {
  pageInfo: PageInfo
  edges: CommentEdge[]
  aggregate: AggregateComment
}

export interface PostPreviousValues {
  id: ID_Output
  createdAt: DateTime
  updatedAt: DateTime
  title: String
  url?: String
  content?: String
  hidden?: Boolean
  mediaLink?: String
  isAdmin?: Boolean
}

export interface AggregatePost {
  count: Int
}

export interface Post extends Node {
  id: ID_Output
  createdAt: DateTime
  updatedAt: DateTime
  title: String
  url?: String
  content?: String
  hidden?: Boolean
  mediaLink?: String
  isAdmin?: Boolean
  author: User
  comments?: Comment[]
  flags?: Flag[]
  votes?: Vote[]
}

export interface VotePreviousValues {
  id: ID_Output
  createdAt: DateTime
  updatedAt: DateTime
  score: Int
  contentType: CONTENT_TYPE
}

export interface VoteSubscriptionPayload {
  mutation: MutationType
  node?: Vote
  updatedFields?: String[]
  previousValues?: VotePreviousValues
}

export interface Comment extends Node {
  id: ID_Output
  createdAt: DateTime
  updatedAt: DateTime
  content: String
  directParentType: CONTENT_TYPE
  author: User
  post: Post
  votes?: Vote[]
  flags?: Flag[]
}

/*
 * A connection to a list of items.

 */
export interface PostConnection {
  pageInfo: PageInfo
  edges: PostEdge[]
  aggregate: AggregatePost
}

/*
 * An edge in a connection.

 */
export interface VoteEdge {
  node: Vote
  cursor: String
}

export interface AggregateComment {
  count: Int
}

/*
 * A connection to a list of items.

 */
export interface UserConnection {
  pageInfo: PageInfo
  edges: UserEdge[]
  aggregate: AggregateUser
}

/*
 * An edge in a connection.

 */
export interface UserEdge {
  node: User
  cursor: String
}

export type DateTime = string

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number
export type ID_Output = string

/*
The 'Long' scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
*/
export type Long = string

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean

export interface Schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

export type Query = {
  users: (args: { where?: UserWhereInput, orderBy?: UserOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<User[]>
  posts: (args: { where?: PostWhereInput, orderBy?: PostOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<Post[]>
  votes: (args: { where?: VoteWhereInput, orderBy?: VoteOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<Vote[]>
  comments: (args: { where?: CommentWhereInput, orderBy?: CommentOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<Comment[]>
  flags: (args: { where?: FlagWhereInput, orderBy?: FlagOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<Flag[]>
  user: (args: { where: UserWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<User | null>
  post: (args: { where: PostWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Post | null>
  vote: (args: { where: VoteWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Vote | null>
  comment: (args: { where: CommentWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Comment | null>
  flag: (args: { where: FlagWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Flag | null>
  usersConnection: (args: { where?: UserWhereInput, orderBy?: UserOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<UserConnection>
  postsConnection: (args: { where?: PostWhereInput, orderBy?: PostOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<PostConnection>
  votesConnection: (args: { where?: VoteWhereInput, orderBy?: VoteOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<VoteConnection>
  commentsConnection: (args: { where?: CommentWhereInput, orderBy?: CommentOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<CommentConnection>
  flagsConnection: (args: { where?: FlagWhereInput, orderBy?: FlagOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<FlagConnection>
  node: (args: { id: ID_Output }, info?: GraphQLResolveInfo | string) => Promise<Node | null>
}

export type Mutation = {
  createUser: (args: { data: UserCreateInput }, info?: GraphQLResolveInfo | string) => Promise<User>
  createPost: (args: { data: PostCreateInput }, info?: GraphQLResolveInfo | string) => Promise<Post>
  createVote: (args: { data: VoteCreateInput }, info?: GraphQLResolveInfo | string) => Promise<Vote>
  createComment: (args: { data: CommentCreateInput }, info?: GraphQLResolveInfo | string) => Promise<Comment>
  createFlag: (args: { data: FlagCreateInput }, info?: GraphQLResolveInfo | string) => Promise<Flag>
  updateUser: (args: { data: UserUpdateInput, where: UserWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<User | null>
  updatePost: (args: { data: PostUpdateInput, where: PostWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Post | null>
  updateVote: (args: { data: VoteUpdateInput, where: VoteWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Vote | null>
  updateComment: (args: { data: CommentUpdateInput, where: CommentWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Comment | null>
  updateFlag: (args: { data: FlagUpdateInput, where: FlagWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Flag | null>
  deleteUser: (args: { where: UserWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<User | null>
  deletePost: (args: { where: PostWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Post | null>
  deleteVote: (args: { where: VoteWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Vote | null>
  deleteComment: (args: { where: CommentWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Comment | null>
  deleteFlag: (args: { where: FlagWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Flag | null>
  upsertUser: (args: { where: UserWhereUniqueInput, create: UserCreateInput, update: UserUpdateInput }, info?: GraphQLResolveInfo | string) => Promise<User>
  upsertPost: (args: { where: PostWhereUniqueInput, create: PostCreateInput, update: PostUpdateInput }, info?: GraphQLResolveInfo | string) => Promise<Post>
  upsertVote: (args: { where: VoteWhereUniqueInput, create: VoteCreateInput, update: VoteUpdateInput }, info?: GraphQLResolveInfo | string) => Promise<Vote>
  upsertComment: (args: { where: CommentWhereUniqueInput, create: CommentCreateInput, update: CommentUpdateInput }, info?: GraphQLResolveInfo | string) => Promise<Comment>
  upsertFlag: (args: { where: FlagWhereUniqueInput, create: FlagCreateInput, update: FlagUpdateInput }, info?: GraphQLResolveInfo | string) => Promise<Flag>
  updateManyUsers: (args: { data: UserUpdateInput, where: UserWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  updateManyPosts: (args: { data: PostUpdateInput, where: PostWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  updateManyVotes: (args: { data: VoteUpdateInput, where: VoteWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  updateManyComments: (args: { data: CommentUpdateInput, where: CommentWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  updateManyFlags: (args: { data: FlagUpdateInput, where: FlagWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  deleteManyUsers: (args: { where: UserWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  deleteManyPosts: (args: { where: PostWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  deleteManyVotes: (args: { where: VoteWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  deleteManyComments: (args: { where: CommentWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  deleteManyFlags: (args: { where: FlagWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
}

export type Subscription = {
  user: (args: { where?: UserSubscriptionWhereInput }, infoOrQuery?: GraphQLResolveInfo | string) => Promise<AsyncIterator<UserSubscriptionPayload>>
  post: (args: { where?: PostSubscriptionWhereInput }, infoOrQuery?: GraphQLResolveInfo | string) => Promise<AsyncIterator<PostSubscriptionPayload>>
  vote: (args: { where?: VoteSubscriptionWhereInput }, infoOrQuery?: GraphQLResolveInfo | string) => Promise<AsyncIterator<VoteSubscriptionPayload>>
  comment: (args: { where?: CommentSubscriptionWhereInput }, infoOrQuery?: GraphQLResolveInfo | string) => Promise<AsyncIterator<CommentSubscriptionPayload>>
  flag: (args: { where?: FlagSubscriptionWhereInput }, infoOrQuery?: GraphQLResolveInfo | string) => Promise<AsyncIterator<FlagSubscriptionPayload>>
}

export class Prisma extends BasePrisma {
  
  constructor({ endpoint, secret, fragmentReplacements, debug }: BasePrismaOptions) {
    super({ typeDefs, endpoint, secret, fragmentReplacements, debug });
  }

  exists = {
    User: (where: UserWhereInput): Promise<boolean> => super.existsDelegate('query', 'users', { where }, {}, '{ id }'),
    Post: (where: PostWhereInput): Promise<boolean> => super.existsDelegate('query', 'posts', { where }, {}, '{ id }'),
    Vote: (where: VoteWhereInput): Promise<boolean> => super.existsDelegate('query', 'votes', { where }, {}, '{ id }'),
    Comment: (where: CommentWhereInput): Promise<boolean> => super.existsDelegate('query', 'comments', { where }, {}, '{ id }'),
    Flag: (where: FlagWhereInput): Promise<boolean> => super.existsDelegate('query', 'flags', { where }, {}, '{ id }')
  }

  query: Query = {
    users: (args, info): Promise<User[]> => super.delegate('query', 'users', args, {}, info),
    posts: (args, info): Promise<Post[]> => super.delegate('query', 'posts', args, {}, info),
    votes: (args, info): Promise<Vote[]> => super.delegate('query', 'votes', args, {}, info),
    comments: (args, info): Promise<Comment[]> => super.delegate('query', 'comments', args, {}, info),
    flags: (args, info): Promise<Flag[]> => super.delegate('query', 'flags', args, {}, info),
    user: (args, info): Promise<User | null> => super.delegate('query', 'user', args, {}, info),
    post: (args, info): Promise<Post | null> => super.delegate('query', 'post', args, {}, info),
    vote: (args, info): Promise<Vote | null> => super.delegate('query', 'vote', args, {}, info),
    comment: (args, info): Promise<Comment | null> => super.delegate('query', 'comment', args, {}, info),
    flag: (args, info): Promise<Flag | null> => super.delegate('query', 'flag', args, {}, info),
    usersConnection: (args, info): Promise<UserConnection> => super.delegate('query', 'usersConnection', args, {}, info),
    postsConnection: (args, info): Promise<PostConnection> => super.delegate('query', 'postsConnection', args, {}, info),
    votesConnection: (args, info): Promise<VoteConnection> => super.delegate('query', 'votesConnection', args, {}, info),
    commentsConnection: (args, info): Promise<CommentConnection> => super.delegate('query', 'commentsConnection', args, {}, info),
    flagsConnection: (args, info): Promise<FlagConnection> => super.delegate('query', 'flagsConnection', args, {}, info),
    node: (args, info): Promise<Node | null> => super.delegate('query', 'node', args, {}, info)
  }

  mutation: Mutation = {
    createUser: (args, info): Promise<User> => super.delegate('mutation', 'createUser', args, {}, info),
    createPost: (args, info): Promise<Post> => super.delegate('mutation', 'createPost', args, {}, info),
    createVote: (args, info): Promise<Vote> => super.delegate('mutation', 'createVote', args, {}, info),
    createComment: (args, info): Promise<Comment> => super.delegate('mutation', 'createComment', args, {}, info),
    createFlag: (args, info): Promise<Flag> => super.delegate('mutation', 'createFlag', args, {}, info),
    updateUser: (args, info): Promise<User | null> => super.delegate('mutation', 'updateUser', args, {}, info),
    updatePost: (args, info): Promise<Post | null> => super.delegate('mutation', 'updatePost', args, {}, info),
    updateVote: (args, info): Promise<Vote | null> => super.delegate('mutation', 'updateVote', args, {}, info),
    updateComment: (args, info): Promise<Comment | null> => super.delegate('mutation', 'updateComment', args, {}, info),
    updateFlag: (args, info): Promise<Flag | null> => super.delegate('mutation', 'updateFlag', args, {}, info),
    deleteUser: (args, info): Promise<User | null> => super.delegate('mutation', 'deleteUser', args, {}, info),
    deletePost: (args, info): Promise<Post | null> => super.delegate('mutation', 'deletePost', args, {}, info),
    deleteVote: (args, info): Promise<Vote | null> => super.delegate('mutation', 'deleteVote', args, {}, info),
    deleteComment: (args, info): Promise<Comment | null> => super.delegate('mutation', 'deleteComment', args, {}, info),
    deleteFlag: (args, info): Promise<Flag | null> => super.delegate('mutation', 'deleteFlag', args, {}, info),
    upsertUser: (args, info): Promise<User> => super.delegate('mutation', 'upsertUser', args, {}, info),
    upsertPost: (args, info): Promise<Post> => super.delegate('mutation', 'upsertPost', args, {}, info),
    upsertVote: (args, info): Promise<Vote> => super.delegate('mutation', 'upsertVote', args, {}, info),
    upsertComment: (args, info): Promise<Comment> => super.delegate('mutation', 'upsertComment', args, {}, info),
    upsertFlag: (args, info): Promise<Flag> => super.delegate('mutation', 'upsertFlag', args, {}, info),
    updateManyUsers: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'updateManyUsers', args, {}, info),
    updateManyPosts: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'updateManyPosts', args, {}, info),
    updateManyVotes: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'updateManyVotes', args, {}, info),
    updateManyComments: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'updateManyComments', args, {}, info),
    updateManyFlags: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'updateManyFlags', args, {}, info),
    deleteManyUsers: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'deleteManyUsers', args, {}, info),
    deleteManyPosts: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'deleteManyPosts', args, {}, info),
    deleteManyVotes: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'deleteManyVotes', args, {}, info),
    deleteManyComments: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'deleteManyComments', args, {}, info),
    deleteManyFlags: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'deleteManyFlags', args, {}, info)
  }

  subscription: Subscription = {
    user: (args, infoOrQuery): Promise<AsyncIterator<UserSubscriptionPayload>> => super.delegateSubscription('user', args, {}, infoOrQuery),
    post: (args, infoOrQuery): Promise<AsyncIterator<PostSubscriptionPayload>> => super.delegateSubscription('post', args, {}, infoOrQuery),
    vote: (args, infoOrQuery): Promise<AsyncIterator<VoteSubscriptionPayload>> => super.delegateSubscription('vote', args, {}, infoOrQuery),
    comment: (args, infoOrQuery): Promise<AsyncIterator<CommentSubscriptionPayload>> => super.delegateSubscription('comment', args, {}, infoOrQuery),
    flag: (args, infoOrQuery): Promise<AsyncIterator<FlagSubscriptionPayload>> => super.delegateSubscription('flag', args, {}, infoOrQuery)
  }
}