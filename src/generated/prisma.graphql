# THIS FILE HAS BEEN AUTO-GENERATED BY "PRISMA DEPLOY"
# DO NOT EDIT THIS FILE DIRECTLY

#
# Model Types
#

type Comment implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  content: String!
  directParentType: CONTENT_TYPE!
  author(where: UserWhereInput): User!
  post(where: PostWhereInput): Post!
  threadedParentComment(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment!]
  votes(where: VoteWhereInput, orderBy: VoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Vote!]
  flags(where: FlagWhereInput, orderBy: FlagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Flag!]
}

type Flag implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  reportedContentType: CONTENT_TYPE!
  creator(where: UserWhereInput): User!
  reportedUser(where: UserWhereInput): User!
  comment(where: CommentWhereInput): Comment
  post(where: PostWhereInput): Post!
}

type Post implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  url: String
  content: String
  hidden: Boolean
  mediaLink: String
  tags: [String!]
  isAdmin: Boolean
  author(where: UserWhereInput): User!
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment!]
  flags(where: FlagWhereInput, orderBy: FlagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Flag!]
  votes(where: VoteWhereInput, orderBy: VoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Vote!]
}

type User implements Node {
  id: ID!
  facebookUserId: String
  facebookEmail: String
  createdAt: DateTime!
  updatedAt: DateTime!
  email: String
  username: String
  password: String
  name: String
  admin: Boolean
  about: String
  profileImageUrl: String
  userType: USER_TYPE
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post!]
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment!]
  votes(where: VoteWhereInput, orderBy: VoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Vote!]
  flagsReportedAboutOthers(where: FlagWhereInput, orderBy: FlagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Flag!]
  flagsReportedAboutThisUser(where: FlagWhereInput, orderBy: FlagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Flag!]
  karma: Int
}

type Vote implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  score: Int!
  contentType: CONTENT_TYPE!
  comment(where: CommentWhereInput): Comment
  post(where: PostWhereInput): Post!
  voter(where: UserWhereInput): User!
}


#
# Other Types
#

type AggregateComment {
  count: Int!
}

type AggregateFlag {
  count: Int!
}

type AggregatePost {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateVote {
  count: Int!
}

type BatchPayload {
  """
  The number of nodes that have been affected by the Batch operation.
  """
  count: Long!
}

"""
A connection to a list of items.
"""
type CommentConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [CommentEdge]!
  aggregate: AggregateComment!
}

input CommentCreateInput {
  content: String!
  directParentType: CONTENT_TYPE!
  author: UserCreateOneWithoutCommentsInput!
  post: PostCreateOneWithoutCommentsInput!
  threadedParentComment: CommentCreateManyWithoutThreadedParentCommentInput
  votes: VoteCreateManyWithoutCommentInput
  flags: FlagCreateManyWithoutCommentInput
}

input CommentCreateManyWithoutAuthorInput {
  create: [CommentCreateWithoutAuthorInput!]
  connect: [CommentWhereUniqueInput!]
}

input CommentCreateManyWithoutPostInput {
  create: [CommentCreateWithoutPostInput!]
  connect: [CommentWhereUniqueInput!]
}

input CommentCreateManyWithoutThreadedParentCommentInput {
  create: [CommentCreateWithoutThreadedParentCommentInput!]
  connect: [CommentWhereUniqueInput!]
}

input CommentCreateOneWithoutFlagsInput {
  create: CommentCreateWithoutFlagsInput
  connect: CommentWhereUniqueInput
}

input CommentCreateOneWithoutVotesInput {
  create: CommentCreateWithoutVotesInput
  connect: CommentWhereUniqueInput
}

input CommentCreateWithoutAuthorInput {
  content: String!
  directParentType: CONTENT_TYPE!
  post: PostCreateOneWithoutCommentsInput!
  threadedParentComment: CommentCreateManyWithoutThreadedParentCommentInput
  votes: VoteCreateManyWithoutCommentInput
  flags: FlagCreateManyWithoutCommentInput
}

input CommentCreateWithoutFlagsInput {
  content: String!
  directParentType: CONTENT_TYPE!
  author: UserCreateOneWithoutCommentsInput!
  post: PostCreateOneWithoutCommentsInput!
  threadedParentComment: CommentCreateManyWithoutThreadedParentCommentInput
  votes: VoteCreateManyWithoutCommentInput
}

input CommentCreateWithoutPostInput {
  content: String!
  directParentType: CONTENT_TYPE!
  author: UserCreateOneWithoutCommentsInput!
  threadedParentComment: CommentCreateManyWithoutThreadedParentCommentInput
  votes: VoteCreateManyWithoutCommentInput
  flags: FlagCreateManyWithoutCommentInput
}

input CommentCreateWithoutThreadedParentCommentInput {
  content: String!
  directParentType: CONTENT_TYPE!
  author: UserCreateOneWithoutCommentsInput!
  post: PostCreateOneWithoutCommentsInput!
  votes: VoteCreateManyWithoutCommentInput
  flags: FlagCreateManyWithoutCommentInput
}

input CommentCreateWithoutVotesInput {
  content: String!
  directParentType: CONTENT_TYPE!
  author: UserCreateOneWithoutCommentsInput!
  post: PostCreateOneWithoutCommentsInput!
  threadedParentComment: CommentCreateManyWithoutThreadedParentCommentInput
  flags: FlagCreateManyWithoutCommentInput
}

"""
An edge in a connection.
"""
type CommentEdge {
  """
  The item at the end of the edge.
  """
  node: Comment!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum CommentOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  content_ASC
  content_DESC
  directParentType_ASC
  directParentType_DESC
}

type CommentPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  content: String!
  directParentType: CONTENT_TYPE!
}

type CommentSubscriptionPayload {
  mutation: MutationType!
  node: Comment
  updatedFields: [String!]
  previousValues: CommentPreviousValues
}

input CommentSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [CommentSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [CommentSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CommentWhereInput
}

input CommentUpdateInput {
  content: String
  directParentType: CONTENT_TYPE
  author: UserUpdateOneWithoutCommentsInput
  post: PostUpdateOneWithoutCommentsInput
  threadedParentComment: CommentUpdateManyWithoutThreadedParentCommentInput
  votes: VoteUpdateManyWithoutCommentInput
  flags: FlagUpdateManyWithoutCommentInput
}

input CommentUpdateManyWithoutAuthorInput {
  create: [CommentCreateWithoutAuthorInput!]
  connect: [CommentWhereUniqueInput!]
  disconnect: [CommentWhereUniqueInput!]
  delete: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithoutAuthorInput!]
  upsert: [CommentUpsertWithoutAuthorInput!]
}

input CommentUpdateManyWithoutPostInput {
  create: [CommentCreateWithoutPostInput!]
  connect: [CommentWhereUniqueInput!]
  disconnect: [CommentWhereUniqueInput!]
  delete: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithoutPostInput!]
  upsert: [CommentUpsertWithoutPostInput!]
}

input CommentUpdateManyWithoutThreadedParentCommentInput {
  create: [CommentCreateWithoutThreadedParentCommentInput!]
  connect: [CommentWhereUniqueInput!]
  disconnect: [CommentWhereUniqueInput!]
  delete: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithoutThreadedParentCommentInput!]
  upsert: [CommentUpsertWithoutThreadedParentCommentInput!]
}

input CommentUpdateOneWithoutFlagsInput {
  create: CommentCreateWithoutFlagsInput
  connect: CommentWhereUniqueInput
  disconnect: CommentWhereUniqueInput
  delete: CommentWhereUniqueInput
  update: CommentUpdateWithoutFlagsInput
  upsert: CommentUpsertWithoutFlagsInput
}

input CommentUpdateOneWithoutVotesInput {
  create: CommentCreateWithoutVotesInput
  connect: CommentWhereUniqueInput
  disconnect: CommentWhereUniqueInput
  delete: CommentWhereUniqueInput
  update: CommentUpdateWithoutVotesInput
  upsert: CommentUpsertWithoutVotesInput
}

input CommentUpdateWithoutAuthorDataInput {
  content: String
  directParentType: CONTENT_TYPE
  post: PostUpdateOneWithoutCommentsInput
  threadedParentComment: CommentUpdateManyWithoutThreadedParentCommentInput
  votes: VoteUpdateManyWithoutCommentInput
  flags: FlagUpdateManyWithoutCommentInput
}

input CommentUpdateWithoutAuthorInput {
  where: CommentWhereUniqueInput!
  data: CommentUpdateWithoutAuthorDataInput!
}

input CommentUpdateWithoutFlagsDataInput {
  content: String
  directParentType: CONTENT_TYPE
  author: UserUpdateOneWithoutCommentsInput
  post: PostUpdateOneWithoutCommentsInput
  threadedParentComment: CommentUpdateManyWithoutThreadedParentCommentInput
  votes: VoteUpdateManyWithoutCommentInput
}

input CommentUpdateWithoutFlagsInput {
  where: CommentWhereUniqueInput!
  data: CommentUpdateWithoutFlagsDataInput!
}

input CommentUpdateWithoutPostDataInput {
  content: String
  directParentType: CONTENT_TYPE
  author: UserUpdateOneWithoutCommentsInput
  threadedParentComment: CommentUpdateManyWithoutThreadedParentCommentInput
  votes: VoteUpdateManyWithoutCommentInput
  flags: FlagUpdateManyWithoutCommentInput
}

input CommentUpdateWithoutPostInput {
  where: CommentWhereUniqueInput!
  data: CommentUpdateWithoutPostDataInput!
}

input CommentUpdateWithoutThreadedParentCommentDataInput {
  content: String
  directParentType: CONTENT_TYPE
  author: UserUpdateOneWithoutCommentsInput
  post: PostUpdateOneWithoutCommentsInput
  votes: VoteUpdateManyWithoutCommentInput
  flags: FlagUpdateManyWithoutCommentInput
}

input CommentUpdateWithoutThreadedParentCommentInput {
  where: CommentWhereUniqueInput!
  data: CommentUpdateWithoutThreadedParentCommentDataInput!
}

input CommentUpdateWithoutVotesDataInput {
  content: String
  directParentType: CONTENT_TYPE
  author: UserUpdateOneWithoutCommentsInput
  post: PostUpdateOneWithoutCommentsInput
  threadedParentComment: CommentUpdateManyWithoutThreadedParentCommentInput
  flags: FlagUpdateManyWithoutCommentInput
}

input CommentUpdateWithoutVotesInput {
  where: CommentWhereUniqueInput!
  data: CommentUpdateWithoutVotesDataInput!
}

input CommentUpsertWithoutAuthorInput {
  where: CommentWhereUniqueInput!
  update: CommentUpdateWithoutAuthorDataInput!
  create: CommentCreateWithoutAuthorInput!
}

input CommentUpsertWithoutFlagsInput {
  where: CommentWhereUniqueInput!
  update: CommentUpdateWithoutFlagsDataInput!
  create: CommentCreateWithoutFlagsInput!
}

input CommentUpsertWithoutPostInput {
  where: CommentWhereUniqueInput!
  update: CommentUpdateWithoutPostDataInput!
  create: CommentCreateWithoutPostInput!
}

input CommentUpsertWithoutThreadedParentCommentInput {
  where: CommentWhereUniqueInput!
  update: CommentUpdateWithoutThreadedParentCommentDataInput!
  create: CommentCreateWithoutThreadedParentCommentInput!
}

input CommentUpsertWithoutVotesInput {
  where: CommentWhereUniqueInput!
  update: CommentUpdateWithoutVotesDataInput!
  create: CommentCreateWithoutVotesInput!
}

input CommentWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [CommentWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [CommentWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  createdAt: DateTime
  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime
  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  createdAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime
  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime
  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime
  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime
  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
  content: String
  """
  All values that are not equal to given value.
  """
  content_not: String
  """
  All values that are contained in given list.
  """
  content_in: [String!]
  """
  All values that are not contained in given list.
  """
  content_not_in: [String!]
  """
  All values less than the given value.
  """
  content_lt: String
  """
  All values less than or equal the given value.
  """
  content_lte: String
  """
  All values greater than the given value.
  """
  content_gt: String
  """
  All values greater than or equal the given value.
  """
  content_gte: String
  """
  All values containing the given string.
  """
  content_contains: String
  """
  All values not containing the given string.
  """
  content_not_contains: String
  """
  All values starting with the given string.
  """
  content_starts_with: String
  """
  All values not starting with the given string.
  """
  content_not_starts_with: String
  """
  All values ending with the given string.
  """
  content_ends_with: String
  """
  All values not ending with the given string.
  """
  content_not_ends_with: String
  directParentType: CONTENT_TYPE
  """
  All values that are not equal to given value.
  """
  directParentType_not: CONTENT_TYPE
  """
  All values that are contained in given list.
  """
  directParentType_in: [CONTENT_TYPE!]
  """
  All values that are not contained in given list.
  """
  directParentType_not_in: [CONTENT_TYPE!]
  author: UserWhereInput
  post: PostWhereInput
  threadedParentComment_every: CommentWhereInput
  threadedParentComment_some: CommentWhereInput
  threadedParentComment_none: CommentWhereInput
  votes_every: VoteWhereInput
  votes_some: VoteWhereInput
  votes_none: VoteWhereInput
  flags_every: FlagWhereInput
  flags_some: FlagWhereInput
  flags_none: FlagWhereInput
}

input CommentWhereUniqueInput {
  id: ID
}

enum CONTENT_TYPE {
  POST
  COMMENT
}

scalar DateTime

"""
A connection to a list of items.
"""
type FlagConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [FlagEdge]!
  aggregate: AggregateFlag!
}

input FlagCreateInput {
  reportedContentType: CONTENT_TYPE!
  creator: UserCreateOneWithoutFlagsReportedAboutOthersInput!
  reportedUser: UserCreateOneWithoutFlagsReportedAboutThisUserInput!
  comment: CommentCreateOneWithoutFlagsInput
  post: PostCreateOneWithoutFlagsInput!
}

input FlagCreateManyWithoutCommentInput {
  create: [FlagCreateWithoutCommentInput!]
  connect: [FlagWhereUniqueInput!]
}

input FlagCreateManyWithoutCreatorInput {
  create: [FlagCreateWithoutCreatorInput!]
  connect: [FlagWhereUniqueInput!]
}

input FlagCreateManyWithoutPostInput {
  create: [FlagCreateWithoutPostInput!]
  connect: [FlagWhereUniqueInput!]
}

input FlagCreateManyWithoutReportedUserInput {
  create: [FlagCreateWithoutReportedUserInput!]
  connect: [FlagWhereUniqueInput!]
}

input FlagCreateWithoutCommentInput {
  reportedContentType: CONTENT_TYPE!
  creator: UserCreateOneWithoutFlagsReportedAboutOthersInput!
  reportedUser: UserCreateOneWithoutFlagsReportedAboutThisUserInput!
  post: PostCreateOneWithoutFlagsInput!
}

input FlagCreateWithoutCreatorInput {
  reportedContentType: CONTENT_TYPE!
  reportedUser: UserCreateOneWithoutFlagsReportedAboutThisUserInput!
  comment: CommentCreateOneWithoutFlagsInput
  post: PostCreateOneWithoutFlagsInput!
}

input FlagCreateWithoutPostInput {
  reportedContentType: CONTENT_TYPE!
  creator: UserCreateOneWithoutFlagsReportedAboutOthersInput!
  reportedUser: UserCreateOneWithoutFlagsReportedAboutThisUserInput!
  comment: CommentCreateOneWithoutFlagsInput
}

input FlagCreateWithoutReportedUserInput {
  reportedContentType: CONTENT_TYPE!
  creator: UserCreateOneWithoutFlagsReportedAboutOthersInput!
  comment: CommentCreateOneWithoutFlagsInput
  post: PostCreateOneWithoutFlagsInput!
}

"""
An edge in a connection.
"""
type FlagEdge {
  """
  The item at the end of the edge.
  """
  node: Flag!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum FlagOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  reportedContentType_ASC
  reportedContentType_DESC
}

type FlagPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  reportedContentType: CONTENT_TYPE!
}

type FlagSubscriptionPayload {
  mutation: MutationType!
  node: Flag
  updatedFields: [String!]
  previousValues: FlagPreviousValues
}

input FlagSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [FlagSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [FlagSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: FlagWhereInput
}

input FlagUpdateInput {
  reportedContentType: CONTENT_TYPE
  creator: UserUpdateOneWithoutFlagsReportedAboutOthersInput
  reportedUser: UserUpdateOneWithoutFlagsReportedAboutThisUserInput
  comment: CommentUpdateOneWithoutFlagsInput
  post: PostUpdateOneWithoutFlagsInput
}

input FlagUpdateManyWithoutCommentInput {
  create: [FlagCreateWithoutCommentInput!]
  connect: [FlagWhereUniqueInput!]
  disconnect: [FlagWhereUniqueInput!]
  delete: [FlagWhereUniqueInput!]
  update: [FlagUpdateWithoutCommentInput!]
  upsert: [FlagUpsertWithoutCommentInput!]
}

input FlagUpdateManyWithoutCreatorInput {
  create: [FlagCreateWithoutCreatorInput!]
  connect: [FlagWhereUniqueInput!]
  disconnect: [FlagWhereUniqueInput!]
  delete: [FlagWhereUniqueInput!]
  update: [FlagUpdateWithoutCreatorInput!]
  upsert: [FlagUpsertWithoutCreatorInput!]
}

input FlagUpdateManyWithoutPostInput {
  create: [FlagCreateWithoutPostInput!]
  connect: [FlagWhereUniqueInput!]
  disconnect: [FlagWhereUniqueInput!]
  delete: [FlagWhereUniqueInput!]
  update: [FlagUpdateWithoutPostInput!]
  upsert: [FlagUpsertWithoutPostInput!]
}

input FlagUpdateManyWithoutReportedUserInput {
  create: [FlagCreateWithoutReportedUserInput!]
  connect: [FlagWhereUniqueInput!]
  disconnect: [FlagWhereUniqueInput!]
  delete: [FlagWhereUniqueInput!]
  update: [FlagUpdateWithoutReportedUserInput!]
  upsert: [FlagUpsertWithoutReportedUserInput!]
}

input FlagUpdateWithoutCommentDataInput {
  reportedContentType: CONTENT_TYPE
  creator: UserUpdateOneWithoutFlagsReportedAboutOthersInput
  reportedUser: UserUpdateOneWithoutFlagsReportedAboutThisUserInput
  post: PostUpdateOneWithoutFlagsInput
}

input FlagUpdateWithoutCommentInput {
  where: FlagWhereUniqueInput!
  data: FlagUpdateWithoutCommentDataInput!
}

input FlagUpdateWithoutCreatorDataInput {
  reportedContentType: CONTENT_TYPE
  reportedUser: UserUpdateOneWithoutFlagsReportedAboutThisUserInput
  comment: CommentUpdateOneWithoutFlagsInput
  post: PostUpdateOneWithoutFlagsInput
}

input FlagUpdateWithoutCreatorInput {
  where: FlagWhereUniqueInput!
  data: FlagUpdateWithoutCreatorDataInput!
}

input FlagUpdateWithoutPostDataInput {
  reportedContentType: CONTENT_TYPE
  creator: UserUpdateOneWithoutFlagsReportedAboutOthersInput
  reportedUser: UserUpdateOneWithoutFlagsReportedAboutThisUserInput
  comment: CommentUpdateOneWithoutFlagsInput
}

input FlagUpdateWithoutPostInput {
  where: FlagWhereUniqueInput!
  data: FlagUpdateWithoutPostDataInput!
}

input FlagUpdateWithoutReportedUserDataInput {
  reportedContentType: CONTENT_TYPE
  creator: UserUpdateOneWithoutFlagsReportedAboutOthersInput
  comment: CommentUpdateOneWithoutFlagsInput
  post: PostUpdateOneWithoutFlagsInput
}

input FlagUpdateWithoutReportedUserInput {
  where: FlagWhereUniqueInput!
  data: FlagUpdateWithoutReportedUserDataInput!
}

input FlagUpsertWithoutCommentInput {
  where: FlagWhereUniqueInput!
  update: FlagUpdateWithoutCommentDataInput!
  create: FlagCreateWithoutCommentInput!
}

input FlagUpsertWithoutCreatorInput {
  where: FlagWhereUniqueInput!
  update: FlagUpdateWithoutCreatorDataInput!
  create: FlagCreateWithoutCreatorInput!
}

input FlagUpsertWithoutPostInput {
  where: FlagWhereUniqueInput!
  update: FlagUpdateWithoutPostDataInput!
  create: FlagCreateWithoutPostInput!
}

input FlagUpsertWithoutReportedUserInput {
  where: FlagWhereUniqueInput!
  update: FlagUpdateWithoutReportedUserDataInput!
  create: FlagCreateWithoutReportedUserInput!
}

input FlagWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [FlagWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [FlagWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  createdAt: DateTime
  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime
  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  createdAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime
  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime
  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime
  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime
  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
  reportedContentType: CONTENT_TYPE
  """
  All values that are not equal to given value.
  """
  reportedContentType_not: CONTENT_TYPE
  """
  All values that are contained in given list.
  """
  reportedContentType_in: [CONTENT_TYPE!]
  """
  All values that are not contained in given list.
  """
  reportedContentType_not_in: [CONTENT_TYPE!]
  creator: UserWhereInput
  reportedUser: UserWhereInput
  comment: CommentWhereInput
  post: PostWhereInput
}

input FlagWhereUniqueInput {
  id: ID
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createUser(data: UserCreateInput!): User!
  createPost(data: PostCreateInput!): Post!
  createVote(data: VoteCreateInput!): Vote!
  createComment(data: CommentCreateInput!): Comment!
  createFlag(data: FlagCreateInput!): Flag!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updatePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post
  updateVote(data: VoteUpdateInput!, where: VoteWhereUniqueInput!): Vote
  updateComment(data: CommentUpdateInput!, where: CommentWhereUniqueInput!): Comment
  updateFlag(data: FlagUpdateInput!, where: FlagWhereUniqueInput!): Flag
  deleteUser(where: UserWhereUniqueInput!): User
  deletePost(where: PostWhereUniqueInput!): Post
  deleteVote(where: VoteWhereUniqueInput!): Vote
  deleteComment(where: CommentWhereUniqueInput!): Comment
  deleteFlag(where: FlagWhereUniqueInput!): Flag
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertPost(where: PostWhereUniqueInput!, create: PostCreateInput!, update: PostUpdateInput!): Post!
  upsertVote(where: VoteWhereUniqueInput!, create: VoteCreateInput!, update: VoteUpdateInput!): Vote!
  upsertComment(where: CommentWhereUniqueInput!, create: CommentCreateInput!, update: CommentUpdateInput!): Comment!
  upsertFlag(where: FlagWhereUniqueInput!, create: FlagCreateInput!, update: FlagUpdateInput!): Flag!
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput!): BatchPayload!
  updateManyPosts(data: PostUpdateInput!, where: PostWhereInput!): BatchPayload!
  updateManyVotes(data: VoteUpdateInput!, where: VoteWhereInput!): BatchPayload!
  updateManyComments(data: CommentUpdateInput!, where: CommentWhereInput!): BatchPayload!
  updateManyFlags(data: FlagUpdateInput!, where: FlagWhereInput!): BatchPayload!
  deleteManyUsers(where: UserWhereInput!): BatchPayload!
  deleteManyPosts(where: PostWhereInput!): BatchPayload!
  deleteManyVotes(where: VoteWhereInput!): BatchPayload!
  deleteManyComments(where: CommentWhereInput!): BatchPayload!
  deleteManyFlags(where: FlagWhereInput!): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""
An object with an ID
"""
interface Node {
  """
  The id of the object.
  """
  id: ID!
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
}

"""
A connection to a list of items.
"""
type PostConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [PostEdge]!
  aggregate: AggregatePost!
}

input PostCreateInput {
  title: String!
  url: String
  content: String
  hidden: Boolean
  mediaLink: String
  isAdmin: Boolean
  tags: PostCreatetagsInput
  author: UserCreateOneWithoutPostsInput!
  comments: CommentCreateManyWithoutPostInput
  flags: FlagCreateManyWithoutPostInput
  votes: VoteCreateManyWithoutPostInput
}

input PostCreateManyWithoutAuthorInput {
  create: [PostCreateWithoutAuthorInput!]
  connect: [PostWhereUniqueInput!]
}

input PostCreateOneWithoutCommentsInput {
  create: PostCreateWithoutCommentsInput
  connect: PostWhereUniqueInput
}

input PostCreateOneWithoutFlagsInput {
  create: PostCreateWithoutFlagsInput
  connect: PostWhereUniqueInput
}

input PostCreateOneWithoutVotesInput {
  create: PostCreateWithoutVotesInput
  connect: PostWhereUniqueInput
}

input PostCreatetagsInput {
  set: [String!]
}

input PostCreateWithoutAuthorInput {
  title: String!
  url: String
  content: String
  hidden: Boolean
  mediaLink: String
  isAdmin: Boolean
  tags: PostCreatetagsInput
  comments: CommentCreateManyWithoutPostInput
  flags: FlagCreateManyWithoutPostInput
  votes: VoteCreateManyWithoutPostInput
}

input PostCreateWithoutCommentsInput {
  title: String!
  url: String
  content: String
  hidden: Boolean
  mediaLink: String
  isAdmin: Boolean
  tags: PostCreatetagsInput
  author: UserCreateOneWithoutPostsInput!
  flags: FlagCreateManyWithoutPostInput
  votes: VoteCreateManyWithoutPostInput
}

input PostCreateWithoutFlagsInput {
  title: String!
  url: String
  content: String
  hidden: Boolean
  mediaLink: String
  isAdmin: Boolean
  tags: PostCreatetagsInput
  author: UserCreateOneWithoutPostsInput!
  comments: CommentCreateManyWithoutPostInput
  votes: VoteCreateManyWithoutPostInput
}

input PostCreateWithoutVotesInput {
  title: String!
  url: String
  content: String
  hidden: Boolean
  mediaLink: String
  isAdmin: Boolean
  tags: PostCreatetagsInput
  author: UserCreateOneWithoutPostsInput!
  comments: CommentCreateManyWithoutPostInput
  flags: FlagCreateManyWithoutPostInput
}

"""
An edge in a connection.
"""
type PostEdge {
  """
  The item at the end of the edge.
  """
  node: Post!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum PostOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  title_ASC
  title_DESC
  url_ASC
  url_DESC
  content_ASC
  content_DESC
  hidden_ASC
  hidden_DESC
  mediaLink_ASC
  mediaLink_DESC
  isAdmin_ASC
  isAdmin_DESC
}

type PostPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  url: String
  content: String
  hidden: Boolean
  mediaLink: String
  tags: [String!]
  isAdmin: Boolean
}

type PostSubscriptionPayload {
  mutation: MutationType!
  node: Post
  updatedFields: [String!]
  previousValues: PostPreviousValues
}

input PostSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [PostSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [PostSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PostWhereInput
}

input PostUpdateInput {
  title: String
  url: String
  content: String
  hidden: Boolean
  mediaLink: String
  isAdmin: Boolean
  tags: PostUpdatetagsInput
  author: UserUpdateOneWithoutPostsInput
  comments: CommentUpdateManyWithoutPostInput
  flags: FlagUpdateManyWithoutPostInput
  votes: VoteUpdateManyWithoutPostInput
}

input PostUpdateManyWithoutAuthorInput {
  create: [PostCreateWithoutAuthorInput!]
  connect: [PostWhereUniqueInput!]
  disconnect: [PostWhereUniqueInput!]
  delete: [PostWhereUniqueInput!]
  update: [PostUpdateWithoutAuthorInput!]
  upsert: [PostUpsertWithoutAuthorInput!]
}

input PostUpdateOneWithoutCommentsInput {
  create: PostCreateWithoutCommentsInput
  connect: PostWhereUniqueInput
  disconnect: PostWhereUniqueInput
  delete: PostWhereUniqueInput
  update: PostUpdateWithoutCommentsInput
  upsert: PostUpsertWithoutCommentsInput
}

input PostUpdateOneWithoutFlagsInput {
  create: PostCreateWithoutFlagsInput
  connect: PostWhereUniqueInput
  disconnect: PostWhereUniqueInput
  delete: PostWhereUniqueInput
  update: PostUpdateWithoutFlagsInput
  upsert: PostUpsertWithoutFlagsInput
}

input PostUpdateOneWithoutVotesInput {
  create: PostCreateWithoutVotesInput
  connect: PostWhereUniqueInput
  disconnect: PostWhereUniqueInput
  delete: PostWhereUniqueInput
  update: PostUpdateWithoutVotesInput
  upsert: PostUpsertWithoutVotesInput
}

input PostUpdatetagsInput {
  set: [String!]
}

input PostUpdateWithoutAuthorDataInput {
  title: String
  url: String
  content: String
  hidden: Boolean
  mediaLink: String
  isAdmin: Boolean
  tags: PostUpdatetagsInput
  comments: CommentUpdateManyWithoutPostInput
  flags: FlagUpdateManyWithoutPostInput
  votes: VoteUpdateManyWithoutPostInput
}

input PostUpdateWithoutAuthorInput {
  where: PostWhereUniqueInput!
  data: PostUpdateWithoutAuthorDataInput!
}

input PostUpdateWithoutCommentsDataInput {
  title: String
  url: String
  content: String
  hidden: Boolean
  mediaLink: String
  isAdmin: Boolean
  tags: PostUpdatetagsInput
  author: UserUpdateOneWithoutPostsInput
  flags: FlagUpdateManyWithoutPostInput
  votes: VoteUpdateManyWithoutPostInput
}

input PostUpdateWithoutCommentsInput {
  where: PostWhereUniqueInput!
  data: PostUpdateWithoutCommentsDataInput!
}

input PostUpdateWithoutFlagsDataInput {
  title: String
  url: String
  content: String
  hidden: Boolean
  mediaLink: String
  isAdmin: Boolean
  tags: PostUpdatetagsInput
  author: UserUpdateOneWithoutPostsInput
  comments: CommentUpdateManyWithoutPostInput
  votes: VoteUpdateManyWithoutPostInput
}

input PostUpdateWithoutFlagsInput {
  where: PostWhereUniqueInput!
  data: PostUpdateWithoutFlagsDataInput!
}

input PostUpdateWithoutVotesDataInput {
  title: String
  url: String
  content: String
  hidden: Boolean
  mediaLink: String
  isAdmin: Boolean
  tags: PostUpdatetagsInput
  author: UserUpdateOneWithoutPostsInput
  comments: CommentUpdateManyWithoutPostInput
  flags: FlagUpdateManyWithoutPostInput
}

input PostUpdateWithoutVotesInput {
  where: PostWhereUniqueInput!
  data: PostUpdateWithoutVotesDataInput!
}

input PostUpsertWithoutAuthorInput {
  where: PostWhereUniqueInput!
  update: PostUpdateWithoutAuthorDataInput!
  create: PostCreateWithoutAuthorInput!
}

input PostUpsertWithoutCommentsInput {
  where: PostWhereUniqueInput!
  update: PostUpdateWithoutCommentsDataInput!
  create: PostCreateWithoutCommentsInput!
}

input PostUpsertWithoutFlagsInput {
  where: PostWhereUniqueInput!
  update: PostUpdateWithoutFlagsDataInput!
  create: PostCreateWithoutFlagsInput!
}

input PostUpsertWithoutVotesInput {
  where: PostWhereUniqueInput!
  update: PostUpdateWithoutVotesDataInput!
  create: PostCreateWithoutVotesInput!
}

input PostWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [PostWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [PostWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  createdAt: DateTime
  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime
  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  createdAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime
  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime
  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime
  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime
  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
  title: String
  """
  All values that are not equal to given value.
  """
  title_not: String
  """
  All values that are contained in given list.
  """
  title_in: [String!]
  """
  All values that are not contained in given list.
  """
  title_not_in: [String!]
  """
  All values less than the given value.
  """
  title_lt: String
  """
  All values less than or equal the given value.
  """
  title_lte: String
  """
  All values greater than the given value.
  """
  title_gt: String
  """
  All values greater than or equal the given value.
  """
  title_gte: String
  """
  All values containing the given string.
  """
  title_contains: String
  """
  All values not containing the given string.
  """
  title_not_contains: String
  """
  All values starting with the given string.
  """
  title_starts_with: String
  """
  All values not starting with the given string.
  """
  title_not_starts_with: String
  """
  All values ending with the given string.
  """
  title_ends_with: String
  """
  All values not ending with the given string.
  """
  title_not_ends_with: String
  url: String
  """
  All values that are not equal to given value.
  """
  url_not: String
  """
  All values that are contained in given list.
  """
  url_in: [String!]
  """
  All values that are not contained in given list.
  """
  url_not_in: [String!]
  """
  All values less than the given value.
  """
  url_lt: String
  """
  All values less than or equal the given value.
  """
  url_lte: String
  """
  All values greater than the given value.
  """
  url_gt: String
  """
  All values greater than or equal the given value.
  """
  url_gte: String
  """
  All values containing the given string.
  """
  url_contains: String
  """
  All values not containing the given string.
  """
  url_not_contains: String
  """
  All values starting with the given string.
  """
  url_starts_with: String
  """
  All values not starting with the given string.
  """
  url_not_starts_with: String
  """
  All values ending with the given string.
  """
  url_ends_with: String
  """
  All values not ending with the given string.
  """
  url_not_ends_with: String
  content: String
  """
  All values that are not equal to given value.
  """
  content_not: String
  """
  All values that are contained in given list.
  """
  content_in: [String!]
  """
  All values that are not contained in given list.
  """
  content_not_in: [String!]
  """
  All values less than the given value.
  """
  content_lt: String
  """
  All values less than or equal the given value.
  """
  content_lte: String
  """
  All values greater than the given value.
  """
  content_gt: String
  """
  All values greater than or equal the given value.
  """
  content_gte: String
  """
  All values containing the given string.
  """
  content_contains: String
  """
  All values not containing the given string.
  """
  content_not_contains: String
  """
  All values starting with the given string.
  """
  content_starts_with: String
  """
  All values not starting with the given string.
  """
  content_not_starts_with: String
  """
  All values ending with the given string.
  """
  content_ends_with: String
  """
  All values not ending with the given string.
  """
  content_not_ends_with: String
  hidden: Boolean
  """
  All values that are not equal to given value.
  """
  hidden_not: Boolean
  mediaLink: String
  """
  All values that are not equal to given value.
  """
  mediaLink_not: String
  """
  All values that are contained in given list.
  """
  mediaLink_in: [String!]
  """
  All values that are not contained in given list.
  """
  mediaLink_not_in: [String!]
  """
  All values less than the given value.
  """
  mediaLink_lt: String
  """
  All values less than or equal the given value.
  """
  mediaLink_lte: String
  """
  All values greater than the given value.
  """
  mediaLink_gt: String
  """
  All values greater than or equal the given value.
  """
  mediaLink_gte: String
  """
  All values containing the given string.
  """
  mediaLink_contains: String
  """
  All values not containing the given string.
  """
  mediaLink_not_contains: String
  """
  All values starting with the given string.
  """
  mediaLink_starts_with: String
  """
  All values not starting with the given string.
  """
  mediaLink_not_starts_with: String
  """
  All values ending with the given string.
  """
  mediaLink_ends_with: String
  """
  All values not ending with the given string.
  """
  mediaLink_not_ends_with: String
  isAdmin: Boolean
  """
  All values that are not equal to given value.
  """
  isAdmin_not: Boolean
  author: UserWhereInput
  comments_every: CommentWhereInput
  comments_some: CommentWhereInput
  comments_none: CommentWhereInput
  flags_every: FlagWhereInput
  flags_some: FlagWhereInput
  flags_none: FlagWhereInput
  votes_every: VoteWhereInput
  votes_some: VoteWhereInput
  votes_none: VoteWhereInput
}

input PostWhereUniqueInput {
  id: ID
}

type Query {
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post]!
  votes(where: VoteWhereInput, orderBy: VoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Vote]!
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment]!
  flags(where: FlagWhereInput, orderBy: FlagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Flag]!
  user(where: UserWhereUniqueInput!): User
  post(where: PostWhereUniqueInput!): Post
  vote(where: VoteWhereUniqueInput!): Vote
  comment(where: CommentWhereUniqueInput!): Comment
  flag(where: FlagWhereUniqueInput!): Flag
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  postsConnection(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PostConnection!
  votesConnection(where: VoteWhereInput, orderBy: VoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): VoteConnection!
  commentsConnection(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CommentConnection!
  flagsConnection(where: FlagWhereInput, orderBy: FlagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FlagConnection!
  """
  Fetches an object given its ID
  """
  node("""
  The ID of an object
  """
  id: ID!): Node
}

type Subscription {
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  post(where: PostSubscriptionWhereInput): PostSubscriptionPayload
  vote(where: VoteSubscriptionWhereInput): VoteSubscriptionPayload
  comment(where: CommentSubscriptionWhereInput): CommentSubscriptionPayload
  flag(where: FlagSubscriptionWhereInput): FlagSubscriptionPayload
}

enum USER_TYPE {
  ADMIN
  MODERATOR
  NORMAL
}

"""
A connection to a list of items.
"""
type UserConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  facebookUserId: String
  facebookEmail: String
  email: String
  username: String
  password: String
  name: String
  admin: Boolean
  about: String
  profileImageUrl: String
  userType: USER_TYPE
  karma: Int
  posts: PostCreateManyWithoutAuthorInput
  comments: CommentCreateManyWithoutAuthorInput
  votes: VoteCreateManyWithoutVoterInput
  flagsReportedAboutOthers: FlagCreateManyWithoutCreatorInput
  flagsReportedAboutThisUser: FlagCreateManyWithoutReportedUserInput
}

input UserCreateOneWithoutCommentsInput {
  create: UserCreateWithoutCommentsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutFlagsReportedAboutOthersInput {
  create: UserCreateWithoutFlagsReportedAboutOthersInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutFlagsReportedAboutThisUserInput {
  create: UserCreateWithoutFlagsReportedAboutThisUserInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutPostsInput {
  create: UserCreateWithoutPostsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutVotesInput {
  create: UserCreateWithoutVotesInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutCommentsInput {
  facebookUserId: String
  facebookEmail: String
  email: String
  username: String
  password: String
  name: String
  admin: Boolean
  about: String
  profileImageUrl: String
  userType: USER_TYPE
  karma: Int
  posts: PostCreateManyWithoutAuthorInput
  votes: VoteCreateManyWithoutVoterInput
  flagsReportedAboutOthers: FlagCreateManyWithoutCreatorInput
  flagsReportedAboutThisUser: FlagCreateManyWithoutReportedUserInput
}

input UserCreateWithoutFlagsReportedAboutOthersInput {
  facebookUserId: String
  facebookEmail: String
  email: String
  username: String
  password: String
  name: String
  admin: Boolean
  about: String
  profileImageUrl: String
  userType: USER_TYPE
  karma: Int
  posts: PostCreateManyWithoutAuthorInput
  comments: CommentCreateManyWithoutAuthorInput
  votes: VoteCreateManyWithoutVoterInput
  flagsReportedAboutThisUser: FlagCreateManyWithoutReportedUserInput
}

input UserCreateWithoutFlagsReportedAboutThisUserInput {
  facebookUserId: String
  facebookEmail: String
  email: String
  username: String
  password: String
  name: String
  admin: Boolean
  about: String
  profileImageUrl: String
  userType: USER_TYPE
  karma: Int
  posts: PostCreateManyWithoutAuthorInput
  comments: CommentCreateManyWithoutAuthorInput
  votes: VoteCreateManyWithoutVoterInput
  flagsReportedAboutOthers: FlagCreateManyWithoutCreatorInput
}

input UserCreateWithoutPostsInput {
  facebookUserId: String
  facebookEmail: String
  email: String
  username: String
  password: String
  name: String
  admin: Boolean
  about: String
  profileImageUrl: String
  userType: USER_TYPE
  karma: Int
  comments: CommentCreateManyWithoutAuthorInput
  votes: VoteCreateManyWithoutVoterInput
  flagsReportedAboutOthers: FlagCreateManyWithoutCreatorInput
  flagsReportedAboutThisUser: FlagCreateManyWithoutReportedUserInput
}

input UserCreateWithoutVotesInput {
  facebookUserId: String
  facebookEmail: String
  email: String
  username: String
  password: String
  name: String
  admin: Boolean
  about: String
  profileImageUrl: String
  userType: USER_TYPE
  karma: Int
  posts: PostCreateManyWithoutAuthorInput
  comments: CommentCreateManyWithoutAuthorInput
  flagsReportedAboutOthers: FlagCreateManyWithoutCreatorInput
  flagsReportedAboutThisUser: FlagCreateManyWithoutReportedUserInput
}

"""
An edge in a connection.
"""
type UserEdge {
  """
  The item at the end of the edge.
  """
  node: User!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  facebookUserId_ASC
  facebookUserId_DESC
  facebookEmail_ASC
  facebookEmail_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  email_ASC
  email_DESC
  username_ASC
  username_DESC
  password_ASC
  password_DESC
  name_ASC
  name_DESC
  admin_ASC
  admin_DESC
  about_ASC
  about_DESC
  profileImageUrl_ASC
  profileImageUrl_DESC
  userType_ASC
  userType_DESC
  karma_ASC
  karma_DESC
}

type UserPreviousValues {
  id: ID!
  facebookUserId: String
  facebookEmail: String
  createdAt: DateTime!
  updatedAt: DateTime!
  email: String
  username: String
  password: String
  name: String
  admin: Boolean
  about: String
  profileImageUrl: String
  userType: USER_TYPE
  karma: Int
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [UserSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [UserSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  facebookUserId: String
  facebookEmail: String
  email: String
  username: String
  password: String
  name: String
  admin: Boolean
  about: String
  profileImageUrl: String
  userType: USER_TYPE
  karma: Int
  posts: PostUpdateManyWithoutAuthorInput
  comments: CommentUpdateManyWithoutAuthorInput
  votes: VoteUpdateManyWithoutVoterInput
  flagsReportedAboutOthers: FlagUpdateManyWithoutCreatorInput
  flagsReportedAboutThisUser: FlagUpdateManyWithoutReportedUserInput
}

input UserUpdateOneWithoutCommentsInput {
  create: UserCreateWithoutCommentsInput
  connect: UserWhereUniqueInput
  disconnect: UserWhereUniqueInput
  delete: UserWhereUniqueInput
  update: UserUpdateWithoutCommentsInput
  upsert: UserUpsertWithoutCommentsInput
}

input UserUpdateOneWithoutFlagsReportedAboutOthersInput {
  create: UserCreateWithoutFlagsReportedAboutOthersInput
  connect: UserWhereUniqueInput
  disconnect: UserWhereUniqueInput
  delete: UserWhereUniqueInput
  update: UserUpdateWithoutFlagsReportedAboutOthersInput
  upsert: UserUpsertWithoutFlagsReportedAboutOthersInput
}

input UserUpdateOneWithoutFlagsReportedAboutThisUserInput {
  create: UserCreateWithoutFlagsReportedAboutThisUserInput
  connect: UserWhereUniqueInput
  disconnect: UserWhereUniqueInput
  delete: UserWhereUniqueInput
  update: UserUpdateWithoutFlagsReportedAboutThisUserInput
  upsert: UserUpsertWithoutFlagsReportedAboutThisUserInput
}

input UserUpdateOneWithoutPostsInput {
  create: UserCreateWithoutPostsInput
  connect: UserWhereUniqueInput
  disconnect: UserWhereUniqueInput
  delete: UserWhereUniqueInput
  update: UserUpdateWithoutPostsInput
  upsert: UserUpsertWithoutPostsInput
}

input UserUpdateOneWithoutVotesInput {
  create: UserCreateWithoutVotesInput
  connect: UserWhereUniqueInput
  disconnect: UserWhereUniqueInput
  delete: UserWhereUniqueInput
  update: UserUpdateWithoutVotesInput
  upsert: UserUpsertWithoutVotesInput
}

input UserUpdateWithoutCommentsDataInput {
  facebookUserId: String
  facebookEmail: String
  email: String
  username: String
  password: String
  name: String
  admin: Boolean
  about: String
  profileImageUrl: String
  userType: USER_TYPE
  karma: Int
  posts: PostUpdateManyWithoutAuthorInput
  votes: VoteUpdateManyWithoutVoterInput
  flagsReportedAboutOthers: FlagUpdateManyWithoutCreatorInput
  flagsReportedAboutThisUser: FlagUpdateManyWithoutReportedUserInput
}

input UserUpdateWithoutCommentsInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutCommentsDataInput!
}

input UserUpdateWithoutFlagsReportedAboutOthersDataInput {
  facebookUserId: String
  facebookEmail: String
  email: String
  username: String
  password: String
  name: String
  admin: Boolean
  about: String
  profileImageUrl: String
  userType: USER_TYPE
  karma: Int
  posts: PostUpdateManyWithoutAuthorInput
  comments: CommentUpdateManyWithoutAuthorInput
  votes: VoteUpdateManyWithoutVoterInput
  flagsReportedAboutThisUser: FlagUpdateManyWithoutReportedUserInput
}

input UserUpdateWithoutFlagsReportedAboutOthersInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutFlagsReportedAboutOthersDataInput!
}

input UserUpdateWithoutFlagsReportedAboutThisUserDataInput {
  facebookUserId: String
  facebookEmail: String
  email: String
  username: String
  password: String
  name: String
  admin: Boolean
  about: String
  profileImageUrl: String
  userType: USER_TYPE
  karma: Int
  posts: PostUpdateManyWithoutAuthorInput
  comments: CommentUpdateManyWithoutAuthorInput
  votes: VoteUpdateManyWithoutVoterInput
  flagsReportedAboutOthers: FlagUpdateManyWithoutCreatorInput
}

input UserUpdateWithoutFlagsReportedAboutThisUserInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutFlagsReportedAboutThisUserDataInput!
}

input UserUpdateWithoutPostsDataInput {
  facebookUserId: String
  facebookEmail: String
  email: String
  username: String
  password: String
  name: String
  admin: Boolean
  about: String
  profileImageUrl: String
  userType: USER_TYPE
  karma: Int
  comments: CommentUpdateManyWithoutAuthorInput
  votes: VoteUpdateManyWithoutVoterInput
  flagsReportedAboutOthers: FlagUpdateManyWithoutCreatorInput
  flagsReportedAboutThisUser: FlagUpdateManyWithoutReportedUserInput
}

input UserUpdateWithoutPostsInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutPostsDataInput!
}

input UserUpdateWithoutVotesDataInput {
  facebookUserId: String
  facebookEmail: String
  email: String
  username: String
  password: String
  name: String
  admin: Boolean
  about: String
  profileImageUrl: String
  userType: USER_TYPE
  karma: Int
  posts: PostUpdateManyWithoutAuthorInput
  comments: CommentUpdateManyWithoutAuthorInput
  flagsReportedAboutOthers: FlagUpdateManyWithoutCreatorInput
  flagsReportedAboutThisUser: FlagUpdateManyWithoutReportedUserInput
}

input UserUpdateWithoutVotesInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutVotesDataInput!
}

input UserUpsertWithoutCommentsInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutCommentsDataInput!
  create: UserCreateWithoutCommentsInput!
}

input UserUpsertWithoutFlagsReportedAboutOthersInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutFlagsReportedAboutOthersDataInput!
  create: UserCreateWithoutFlagsReportedAboutOthersInput!
}

input UserUpsertWithoutFlagsReportedAboutThisUserInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutFlagsReportedAboutThisUserDataInput!
  create: UserCreateWithoutFlagsReportedAboutThisUserInput!
}

input UserUpsertWithoutPostsInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutPostsDataInput!
  create: UserCreateWithoutPostsInput!
}

input UserUpsertWithoutVotesInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutVotesDataInput!
  create: UserCreateWithoutVotesInput!
}

input UserWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [UserWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [UserWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  facebookUserId: String
  """
  All values that are not equal to given value.
  """
  facebookUserId_not: String
  """
  All values that are contained in given list.
  """
  facebookUserId_in: [String!]
  """
  All values that are not contained in given list.
  """
  facebookUserId_not_in: [String!]
  """
  All values less than the given value.
  """
  facebookUserId_lt: String
  """
  All values less than or equal the given value.
  """
  facebookUserId_lte: String
  """
  All values greater than the given value.
  """
  facebookUserId_gt: String
  """
  All values greater than or equal the given value.
  """
  facebookUserId_gte: String
  """
  All values containing the given string.
  """
  facebookUserId_contains: String
  """
  All values not containing the given string.
  """
  facebookUserId_not_contains: String
  """
  All values starting with the given string.
  """
  facebookUserId_starts_with: String
  """
  All values not starting with the given string.
  """
  facebookUserId_not_starts_with: String
  """
  All values ending with the given string.
  """
  facebookUserId_ends_with: String
  """
  All values not ending with the given string.
  """
  facebookUserId_not_ends_with: String
  facebookEmail: String
  """
  All values that are not equal to given value.
  """
  facebookEmail_not: String
  """
  All values that are contained in given list.
  """
  facebookEmail_in: [String!]
  """
  All values that are not contained in given list.
  """
  facebookEmail_not_in: [String!]
  """
  All values less than the given value.
  """
  facebookEmail_lt: String
  """
  All values less than or equal the given value.
  """
  facebookEmail_lte: String
  """
  All values greater than the given value.
  """
  facebookEmail_gt: String
  """
  All values greater than or equal the given value.
  """
  facebookEmail_gte: String
  """
  All values containing the given string.
  """
  facebookEmail_contains: String
  """
  All values not containing the given string.
  """
  facebookEmail_not_contains: String
  """
  All values starting with the given string.
  """
  facebookEmail_starts_with: String
  """
  All values not starting with the given string.
  """
  facebookEmail_not_starts_with: String
  """
  All values ending with the given string.
  """
  facebookEmail_ends_with: String
  """
  All values not ending with the given string.
  """
  facebookEmail_not_ends_with: String
  createdAt: DateTime
  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime
  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  createdAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime
  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime
  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime
  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime
  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
  email: String
  """
  All values that are not equal to given value.
  """
  email_not: String
  """
  All values that are contained in given list.
  """
  email_in: [String!]
  """
  All values that are not contained in given list.
  """
  email_not_in: [String!]
  """
  All values less than the given value.
  """
  email_lt: String
  """
  All values less than or equal the given value.
  """
  email_lte: String
  """
  All values greater than the given value.
  """
  email_gt: String
  """
  All values greater than or equal the given value.
  """
  email_gte: String
  """
  All values containing the given string.
  """
  email_contains: String
  """
  All values not containing the given string.
  """
  email_not_contains: String
  """
  All values starting with the given string.
  """
  email_starts_with: String
  """
  All values not starting with the given string.
  """
  email_not_starts_with: String
  """
  All values ending with the given string.
  """
  email_ends_with: String
  """
  All values not ending with the given string.
  """
  email_not_ends_with: String
  username: String
  """
  All values that are not equal to given value.
  """
  username_not: String
  """
  All values that are contained in given list.
  """
  username_in: [String!]
  """
  All values that are not contained in given list.
  """
  username_not_in: [String!]
  """
  All values less than the given value.
  """
  username_lt: String
  """
  All values less than or equal the given value.
  """
  username_lte: String
  """
  All values greater than the given value.
  """
  username_gt: String
  """
  All values greater than or equal the given value.
  """
  username_gte: String
  """
  All values containing the given string.
  """
  username_contains: String
  """
  All values not containing the given string.
  """
  username_not_contains: String
  """
  All values starting with the given string.
  """
  username_starts_with: String
  """
  All values not starting with the given string.
  """
  username_not_starts_with: String
  """
  All values ending with the given string.
  """
  username_ends_with: String
  """
  All values not ending with the given string.
  """
  username_not_ends_with: String
  password: String
  """
  All values that are not equal to given value.
  """
  password_not: String
  """
  All values that are contained in given list.
  """
  password_in: [String!]
  """
  All values that are not contained in given list.
  """
  password_not_in: [String!]
  """
  All values less than the given value.
  """
  password_lt: String
  """
  All values less than or equal the given value.
  """
  password_lte: String
  """
  All values greater than the given value.
  """
  password_gt: String
  """
  All values greater than or equal the given value.
  """
  password_gte: String
  """
  All values containing the given string.
  """
  password_contains: String
  """
  All values not containing the given string.
  """
  password_not_contains: String
  """
  All values starting with the given string.
  """
  password_starts_with: String
  """
  All values not starting with the given string.
  """
  password_not_starts_with: String
  """
  All values ending with the given string.
  """
  password_ends_with: String
  """
  All values not ending with the given string.
  """
  password_not_ends_with: String
  name: String
  """
  All values that are not equal to given value.
  """
  name_not: String
  """
  All values that are contained in given list.
  """
  name_in: [String!]
  """
  All values that are not contained in given list.
  """
  name_not_in: [String!]
  """
  All values less than the given value.
  """
  name_lt: String
  """
  All values less than or equal the given value.
  """
  name_lte: String
  """
  All values greater than the given value.
  """
  name_gt: String
  """
  All values greater than or equal the given value.
  """
  name_gte: String
  """
  All values containing the given string.
  """
  name_contains: String
  """
  All values not containing the given string.
  """
  name_not_contains: String
  """
  All values starting with the given string.
  """
  name_starts_with: String
  """
  All values not starting with the given string.
  """
  name_not_starts_with: String
  """
  All values ending with the given string.
  """
  name_ends_with: String
  """
  All values not ending with the given string.
  """
  name_not_ends_with: String
  admin: Boolean
  """
  All values that are not equal to given value.
  """
  admin_not: Boolean
  about: String
  """
  All values that are not equal to given value.
  """
  about_not: String
  """
  All values that are contained in given list.
  """
  about_in: [String!]
  """
  All values that are not contained in given list.
  """
  about_not_in: [String!]
  """
  All values less than the given value.
  """
  about_lt: String
  """
  All values less than or equal the given value.
  """
  about_lte: String
  """
  All values greater than the given value.
  """
  about_gt: String
  """
  All values greater than or equal the given value.
  """
  about_gte: String
  """
  All values containing the given string.
  """
  about_contains: String
  """
  All values not containing the given string.
  """
  about_not_contains: String
  """
  All values starting with the given string.
  """
  about_starts_with: String
  """
  All values not starting with the given string.
  """
  about_not_starts_with: String
  """
  All values ending with the given string.
  """
  about_ends_with: String
  """
  All values not ending with the given string.
  """
  about_not_ends_with: String
  profileImageUrl: String
  """
  All values that are not equal to given value.
  """
  profileImageUrl_not: String
  """
  All values that are contained in given list.
  """
  profileImageUrl_in: [String!]
  """
  All values that are not contained in given list.
  """
  profileImageUrl_not_in: [String!]
  """
  All values less than the given value.
  """
  profileImageUrl_lt: String
  """
  All values less than or equal the given value.
  """
  profileImageUrl_lte: String
  """
  All values greater than the given value.
  """
  profileImageUrl_gt: String
  """
  All values greater than or equal the given value.
  """
  profileImageUrl_gte: String
  """
  All values containing the given string.
  """
  profileImageUrl_contains: String
  """
  All values not containing the given string.
  """
  profileImageUrl_not_contains: String
  """
  All values starting with the given string.
  """
  profileImageUrl_starts_with: String
  """
  All values not starting with the given string.
  """
  profileImageUrl_not_starts_with: String
  """
  All values ending with the given string.
  """
  profileImageUrl_ends_with: String
  """
  All values not ending with the given string.
  """
  profileImageUrl_not_ends_with: String
  userType: USER_TYPE
  """
  All values that are not equal to given value.
  """
  userType_not: USER_TYPE
  """
  All values that are contained in given list.
  """
  userType_in: [USER_TYPE!]
  """
  All values that are not contained in given list.
  """
  userType_not_in: [USER_TYPE!]
  karma: Int
  """
  All values that are not equal to given value.
  """
  karma_not: Int
  """
  All values that are contained in given list.
  """
  karma_in: [Int!]
  """
  All values that are not contained in given list.
  """
  karma_not_in: [Int!]
  """
  All values less than the given value.
  """
  karma_lt: Int
  """
  All values less than or equal the given value.
  """
  karma_lte: Int
  """
  All values greater than the given value.
  """
  karma_gt: Int
  """
  All values greater than or equal the given value.
  """
  karma_gte: Int
  posts_every: PostWhereInput
  posts_some: PostWhereInput
  posts_none: PostWhereInput
  comments_every: CommentWhereInput
  comments_some: CommentWhereInput
  comments_none: CommentWhereInput
  votes_every: VoteWhereInput
  votes_some: VoteWhereInput
  votes_none: VoteWhereInput
  flagsReportedAboutOthers_every: FlagWhereInput
  flagsReportedAboutOthers_some: FlagWhereInput
  flagsReportedAboutOthers_none: FlagWhereInput
  flagsReportedAboutThisUser_every: FlagWhereInput
  flagsReportedAboutThisUser_some: FlagWhereInput
  flagsReportedAboutThisUser_none: FlagWhereInput
}

input UserWhereUniqueInput {
  id: ID
  facebookUserId: String
  username: String
}

"""
A connection to a list of items.
"""
type VoteConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [VoteEdge]!
  aggregate: AggregateVote!
}

input VoteCreateInput {
  score: Int!
  contentType: CONTENT_TYPE!
  comment: CommentCreateOneWithoutVotesInput
  post: PostCreateOneWithoutVotesInput!
  voter: UserCreateOneWithoutVotesInput!
}

input VoteCreateManyWithoutCommentInput {
  create: [VoteCreateWithoutCommentInput!]
  connect: [VoteWhereUniqueInput!]
}

input VoteCreateManyWithoutPostInput {
  create: [VoteCreateWithoutPostInput!]
  connect: [VoteWhereUniqueInput!]
}

input VoteCreateManyWithoutVoterInput {
  create: [VoteCreateWithoutVoterInput!]
  connect: [VoteWhereUniqueInput!]
}

input VoteCreateWithoutCommentInput {
  score: Int!
  contentType: CONTENT_TYPE!
  post: PostCreateOneWithoutVotesInput!
  voter: UserCreateOneWithoutVotesInput!
}

input VoteCreateWithoutPostInput {
  score: Int!
  contentType: CONTENT_TYPE!
  comment: CommentCreateOneWithoutVotesInput
  voter: UserCreateOneWithoutVotesInput!
}

input VoteCreateWithoutVoterInput {
  score: Int!
  contentType: CONTENT_TYPE!
  comment: CommentCreateOneWithoutVotesInput
  post: PostCreateOneWithoutVotesInput!
}

"""
An edge in a connection.
"""
type VoteEdge {
  """
  The item at the end of the edge.
  """
  node: Vote!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum VoteOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  score_ASC
  score_DESC
  contentType_ASC
  contentType_DESC
}

type VotePreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  score: Int!
  contentType: CONTENT_TYPE!
}

type VoteSubscriptionPayload {
  mutation: MutationType!
  node: Vote
  updatedFields: [String!]
  previousValues: VotePreviousValues
}

input VoteSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [VoteSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [VoteSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: VoteWhereInput
}

input VoteUpdateInput {
  score: Int
  contentType: CONTENT_TYPE
  comment: CommentUpdateOneWithoutVotesInput
  post: PostUpdateOneWithoutVotesInput
  voter: UserUpdateOneWithoutVotesInput
}

input VoteUpdateManyWithoutCommentInput {
  create: [VoteCreateWithoutCommentInput!]
  connect: [VoteWhereUniqueInput!]
  disconnect: [VoteWhereUniqueInput!]
  delete: [VoteWhereUniqueInput!]
  update: [VoteUpdateWithoutCommentInput!]
  upsert: [VoteUpsertWithoutCommentInput!]
}

input VoteUpdateManyWithoutPostInput {
  create: [VoteCreateWithoutPostInput!]
  connect: [VoteWhereUniqueInput!]
  disconnect: [VoteWhereUniqueInput!]
  delete: [VoteWhereUniqueInput!]
  update: [VoteUpdateWithoutPostInput!]
  upsert: [VoteUpsertWithoutPostInput!]
}

input VoteUpdateManyWithoutVoterInput {
  create: [VoteCreateWithoutVoterInput!]
  connect: [VoteWhereUniqueInput!]
  disconnect: [VoteWhereUniqueInput!]
  delete: [VoteWhereUniqueInput!]
  update: [VoteUpdateWithoutVoterInput!]
  upsert: [VoteUpsertWithoutVoterInput!]
}

input VoteUpdateWithoutCommentDataInput {
  score: Int
  contentType: CONTENT_TYPE
  post: PostUpdateOneWithoutVotesInput
  voter: UserUpdateOneWithoutVotesInput
}

input VoteUpdateWithoutCommentInput {
  where: VoteWhereUniqueInput!
  data: VoteUpdateWithoutCommentDataInput!
}

input VoteUpdateWithoutPostDataInput {
  score: Int
  contentType: CONTENT_TYPE
  comment: CommentUpdateOneWithoutVotesInput
  voter: UserUpdateOneWithoutVotesInput
}

input VoteUpdateWithoutPostInput {
  where: VoteWhereUniqueInput!
  data: VoteUpdateWithoutPostDataInput!
}

input VoteUpdateWithoutVoterDataInput {
  score: Int
  contentType: CONTENT_TYPE
  comment: CommentUpdateOneWithoutVotesInput
  post: PostUpdateOneWithoutVotesInput
}

input VoteUpdateWithoutVoterInput {
  where: VoteWhereUniqueInput!
  data: VoteUpdateWithoutVoterDataInput!
}

input VoteUpsertWithoutCommentInput {
  where: VoteWhereUniqueInput!
  update: VoteUpdateWithoutCommentDataInput!
  create: VoteCreateWithoutCommentInput!
}

input VoteUpsertWithoutPostInput {
  where: VoteWhereUniqueInput!
  update: VoteUpdateWithoutPostDataInput!
  create: VoteCreateWithoutPostInput!
}

input VoteUpsertWithoutVoterInput {
  where: VoteWhereUniqueInput!
  update: VoteUpdateWithoutVoterDataInput!
  create: VoteCreateWithoutVoterInput!
}

input VoteWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [VoteWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [VoteWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  createdAt: DateTime
  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime
  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  createdAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime
  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime
  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime
  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime
  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
  score: Int
  """
  All values that are not equal to given value.
  """
  score_not: Int
  """
  All values that are contained in given list.
  """
  score_in: [Int!]
  """
  All values that are not contained in given list.
  """
  score_not_in: [Int!]
  """
  All values less than the given value.
  """
  score_lt: Int
  """
  All values less than or equal the given value.
  """
  score_lte: Int
  """
  All values greater than the given value.
  """
  score_gt: Int
  """
  All values greater than or equal the given value.
  """
  score_gte: Int
  contentType: CONTENT_TYPE
  """
  All values that are not equal to given value.
  """
  contentType_not: CONTENT_TYPE
  """
  All values that are contained in given list.
  """
  contentType_in: [CONTENT_TYPE!]
  """
  All values that are not contained in given list.
  """
  contentType_not_in: [CONTENT_TYPE!]
  comment: CommentWhereInput
  post: PostWhereInput
  voter: UserWhereInput
}

input VoteWhereUniqueInput {
  id: ID
}
